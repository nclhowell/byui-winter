{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContactService {\n  constructor(http) {\n    this.http = http;\n    // firebaseURIdocsArray: string = \"https://wdd430cms0-default-rtdb.firebaseio.com/contacts.json\";\n    this.mongoURIdocsArray = 'http://localhost:3000/contacts';\n    // jsondocs: Contact[] = [];\n    this.contacts = [];\n    this.message = 'generic message';\n    //  docsArray: Contact[] = MOCKCONTACTS;\n    this.contactSelectedEvent = new EventEmitter();\n    this.contactChangedEvent = new EventEmitter();\n    this.contactListChanged = new Subject();\n  }\n  getContacts() {\n    this.http.get(this.mongoURIdocsArray).subscribe(docs => {\n      this.contacts = docs.contacts;\n      this.maxContactId = this.getMaxContactId();\n      this.contacts.sort((a, b) => {\n        if (a.name < b.name) {\n          return -1;\n        }\n        if (a.name > b.name) {\n          return 1;\n        }\n        return 0;\n      });\n      // console.log(this.contacts);\n      this.contactListChanged.next(this.contacts.slice());\n    });\n    return this.contacts.slice();\n  }\n  getContact(id) {\n    console.log(id);\n    console.log(this.http.get('localhost:3000/contacts/' + id));\n    return this.http.get('localhost:3000/contacts/' + id);\n  }\n  // getContact(id: string): Contact {\n  //   for (const contact of this.contacts) {\n  //     if (contact.id == id) {\n  //       //console.log(\"found!\")\n  //       return contact;\n  //     }\n  //   }\n  //   return null;\n  // }\n  addContact(contact) {\n    if (!contact) {\n      return;\n    }\n    // make sure id of the new Contact is empty\n    contact.id = '';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // add to database\n    this.http.post('http://localhost:3000/contacts', contact, {\n      headers: headers\n    }).subscribe(responseData => {\n      // add new contact to docsArray\n      this.contacts.push(responseData.contact);\n      this.sortAndSend();\n    });\n  }\n  // addContact(newContact: Contact) {\n  //   if (newContact == undefined || newContact == null) {\n  //     return;\n  //   }\n  //   this.maxContactId++;\n  //   newContact.id = String(this.maxContactId);\n  //   this.docsArray.push(newContact)\n  //   this.storeContacts();\n  // }\n  // updateContact(originalContact: Contact, newContact: Contact) {\n  //   if (originalContact == null || originalContact == null || originalContact == undefined || originalContact == undefined) {\n  //     return;\n  //   }\n  //   const pos = this.docsArray.indexOf(originalContact);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   newContact.id = originalContact.id;\n  //   this.docsArray[pos] = newContact;\n  //   this.storeContacts();\n  // }\n  updateContact(originalContact, newContact) {\n    if (!originalContact || !newContact) {\n      return;\n    }\n    const pos = this.contacts.findIndex(d => d.id === originalContact.id);\n    if (pos < 0) {\n      return;\n    }\n    // set the id of the new Contact to the id of the old Contact\n    newContact.id = originalContact.id;\n    // newContact._id = originalContact._id;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // update database\n    this.http.put('http://localhost:3000/contacts/' + originalContact.id, newContact, {\n      headers: headers\n    }).subscribe(response => {\n      this.contacts[pos] = newContact;\n      this.sortAndSend();\n    });\n  }\n  // deleteContact(contact: Contact) {\n  //   if (!contact) {\n  //     return;\n  //   }\n  //   const pos = this.docsArray.indexOf(contact);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   this.docsArray.splice(pos, 1);\n  //   this.storeContacts();\n  // }\n  deleteContact(contact) {\n    if (!contact) {\n      return;\n    }\n    const pos = this.contacts.findIndex(d => d.id === contact.id);\n    if (pos < 0) {\n      return;\n    }\n    // delete from database\n    this.http.delete('http://localhost:3000/contacts/' + contact.id).subscribe(response => {\n      this.contacts.splice(pos, 1);\n      this.sortAndSend();\n    });\n  }\n  getMaxContactId() {\n    let maxId = 0;\n    for (const contact of this.contacts) {\n      if (+contact.id > maxId) {\n        maxId = +contact.id;\n      }\n    }\n    return maxId;\n  }\n  storeContacts() {\n    this.http.put(this.mongoURIdocsArray, JSON.stringify(this.contacts), {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    }).subscribe({\n      next: () => this.contactListChanged.next(this.contacts.slice()),\n      error: evar => console.error('Error saving docsArray: ', evar)\n    });\n  }\n  sortAndSend() {\n    this.contacts.sort((a, b) => {\n      if (a.name < b.name) {\n        return -1;\n      }\n      if (a.name > b.name) {\n        return 1;\n      }\n      return 0;\n    });\n    this.contactListChanged.next(this.contacts.slice());\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient));\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","EventEmitter","Subject","ContactService","constructor","http","getContacts","get","mongoURIdocsArray","subscribe","docs","contacts","maxContactId","getMaxContactId","sort","a","b","name","contactListChanged","next","slice","getContact","id","console","log","addContact","contact","headers","post","responseData","push","sortAndSend","updateContact","originalContact","newContact","pos","findIndex","d","put","response","deleteContact","delete","splice","maxId","storeContacts","JSON","stringify","error","evar","factory","providedIn"],"sourceRoot":"","sources":["C:\\data\\A-byu\\Full Stack Dev WDD 430\\code\\wdd430\\byui-winter\\week11\\cms\\src\\app\\contacts\\contact.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { EventEmitter, Injectable, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Contact } from './contact.model';\n// import { MOCKCONTACTS } from './MOCKCONTACTS';\nimport { json } from 'body-parser';\nimport { response } from 'express';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContactService {\n  // firebaseURIdocsArray: string = \"https://wdd430cms0-default-rtdb.firebaseio.com/contacts.json\";\n  mongoURIdocsArray: string = 'http://localhost:3000/contacts';\n  // jsondocs: Contact[] = [];\n  contacts: Contact[] = [];\n  contact: Contact;\n  message: string = 'generic message';\n  //  docsArray: Contact[] = MOCKCONTACTS;\n  contactSelectedEvent = new EventEmitter<Contact>();\n  contactChangedEvent = new EventEmitter<Contact[]>();\n  contactListChanged = new Subject<Contact[]>();\n  maxContactId: number;\n\n  constructor(private http: HttpClient) {}\n\n  getContacts() {\n    this.http\n      .get<{ message: string; contacts: Contact[] }>(this.mongoURIdocsArray)\n      .subscribe((docs) => {\n        this.contacts = docs.contacts;\n        this.maxContactId = this.getMaxContactId();\n        this.contacts.sort((a, b) => {\n          if (a.name < b.name) {\n            return -1;\n          }\n          if (a.name > b.name) {\n            return 1;\n          }\n          return 0;\n        });\n       // console.log(this.contacts);\n        this.contactListChanged.next(this.contacts.slice());\n      });\n    return this.contacts.slice();\n  }\n\n  getContact(id: string) {\n    console.log(id);\n    console.log(this.http.get<{ message: string; contact: Contact }>('localhost:3000/contacts/' + id));\n    return this.http.get<{ message: string; contact: Contact }>('localhost:3000/contacts/' + id);\n  }\n  // getContact(id: string): Contact {\n\n  //   for (const contact of this.contacts) {\n  //     if (contact.id == id) {\n\n  //       //console.log(\"found!\")\n  //       return contact;\n  //     }\n  //   }\n  //   return null;\n  // }\n\n  addContact(contact: Contact) {\n    if (!contact) {\n      return;\n    }\n\n    // make sure id of the new Contact is empty\n    contact.id = '';\n\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    // add to database\n    this.http\n      .post<{ message: string; contact: Contact }>(\n        'http://localhost:3000/contacts',\n        contact,\n        { headers: headers }\n      )\n      .subscribe((responseData) => {\n        // add new contact to docsArray\n        this.contacts.push(responseData.contact);\n        this.sortAndSend();\n      });\n  }\n\n  // addContact(newContact: Contact) {\n  //   if (newContact == undefined || newContact == null) {\n  //     return;\n  //   }\n\n  //   this.maxContactId++;\n  //   newContact.id = String(this.maxContactId);\n  //   this.docsArray.push(newContact)\n  //   this.storeContacts();\n  // }\n\n  // updateContact(originalContact: Contact, newContact: Contact) {\n  //   if (originalContact == null || originalContact == null || originalContact == undefined || originalContact == undefined) {\n  //     return;\n  //   }\n\n  //   const pos = this.docsArray.indexOf(originalContact);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n\n  //   newContact.id = originalContact.id;\n  //   this.docsArray[pos] = newContact;\n  //   this.storeContacts();\n  // }\n\n  updateContact(originalContact: Contact, newContact: Contact) {\n    if (!originalContact || !newContact) {\n      return;\n    }\n\n    const pos = this.contacts.findIndex((d) => d.id === originalContact.id);\n\n    if (pos < 0) {\n      return;\n    }\n\n    // set the id of the new Contact to the id of the old Contact\n    newContact.id = originalContact.id;\n    // newContact._id = originalContact._id;\n\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    // update database\n    this.http\n      .put('http://localhost:3000/contacts/' + originalContact.id, newContact, {\n        headers: headers,\n      })\n      .subscribe((response: Response) => {\n        this.contacts[pos] = newContact;\n        this.sortAndSend();\n      });\n  }\n\n  // deleteContact(contact: Contact) {\n  //   if (!contact) {\n  //     return;\n  //   }\n  //   const pos = this.docsArray.indexOf(contact);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   this.docsArray.splice(pos, 1);\n  //   this.storeContacts();\n  // }\n\n  deleteContact(contact: Contact) {\n    if (!contact) {\n      return;\n    }\n\n    const pos = this.contacts.findIndex((d) => d.id === contact.id);\n\n    if (pos < 0) {\n      return;\n    }\n\n    // delete from database\n    this.http\n      .delete('http://localhost:3000/contacts/' + contact.id)\n      .subscribe((response: Response) => {\n        this.contacts.splice(pos, 1);\n        this.sortAndSend();\n      });\n  }\n\n  getMaxContactId(): number {\n    let maxId = 0;\n    for (const contact of this.contacts) {\n      if (+contact.id > maxId) {\n        maxId = +contact.id;\n      }\n    }\n    return maxId;\n  }\n\n  storeContacts() {\n    this.http\n      .put(this.mongoURIdocsArray, JSON.stringify(this.contacts), {\n        headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n      })\n      .subscribe({\n        next: () => this.contactListChanged.next(this.contacts.slice()),\n        error: (evar) => console.error('Error saving docsArray: ', evar),\n      });\n  }\n\n  sortAndSend() {\n    this.contacts.sort((a, b) => {\n      if (a.name < b.name) {\n        return -1;\n      }\n      if (a.name > b.name) {\n        return 1;\n      }\n      return 0;\n    });\n    this.contactListChanged.next(this.contacts.slice());\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}