{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MessageService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    // mongoURIdocsArray: string = \"https://wdd430cms0-default-rtdb.firebaseio.com/messages.json\";\n    this.mongoURIdocsArray = 'http://localhost:3000/messages';\n    // jsondocs: Message[] = [];\n    this.messages = [];\n    //  docsArray: Message[] = MOCKMESSAGES;\n    this.messageSelectedEvent = new EventEmitter();\n    this.messageChangedEvent = new EventEmitter();\n    this.messageListChanged = new Subject();\n  }\n  // this.docsArray = MOCKMESSAGES;\n  // this.docsArray = this.getMessages();\n  // }\n  // OnInit () {\n  //   this.getMessages()\n  // }\n  //   // console.log('Constructor mongoDocs =', this.docsArray);\n  //  this.jsondocs = this.getMessages();\n  // this.docsArray = this.getMessages();\n  // console.log('mockDocs = ', this.docsArray);\n  // console.log(\"Web Docs Array = \", this.webdocsArray);\n  // this.maxMessageId = this.getMaxMessageId();\n  // console.log(\"Max Doc ID =\", this.maxMessageId);\n  // getMessages() {\n  //   this.httpClient\n  //     .get<{ message: string; docsArray: Message[] }>(this.mongoURIdocsArray)\n  //     .subscribe((docsArrayData) => {\n  //       console.log('It works!');\n  //       this.docsArray = docsArrayData.docsArray;\n  //       response.status(200).json({\n  //         message: 'Docs fetched successfully'\n  //          docsArray: docsArray });\n  //       });\n  //sortAndSend() {\n  // this.docsArray.sort((a, b) => {\n  //   if (a.sender < b.sender) {\n  //     return -1;\n  //   }\n  //   if (a.sender > b.sender) {\n  //     return 1;\n  //   }\n  //   return 0;\n  // });\n  //       this.messageListChanged.next(this.docsArray.slice());\n  //     });\n  // }\n  getMessages() {\n    this.httpClient.get(this.mongoURIdocsArray)\n    // .get<Message[]>(this.mongoURIdocsArray)\n    .subscribe(docs => {\n      this.messages = docs.messages;\n      //console.log(\"getDocuuments mongoDocs =\", this.docsArray.slice());\n      this.maxMessageId = this.getMaxMessageId();\n      // Alphabetical Sort\n      this.messages.sort((a, b) => {\n        if (a.sender < b.sender) {\n          return -1;\n        }\n        if (a.sender > b.sender) {\n          return 1;\n        }\n        return 0;\n      });\n      // console.log(\"Returned:\", this.docsArray);\n      // console.log(this.messages);\n      this.messageListChanged.next(this.messages.slice());\n    });\n    // console.log(this.docsArray.slice());\n    // console.log(\"Returned Slice:\", this.docsArray);\n    return this.messages.slice();\n  }\n  getMessage(id) {\n    for (const message of this.messages) {\n      if (message.id == id) {\n        console.log(id);\n        return message;\n      }\n    }\n    return null;\n  }\n  addMessage(message) {\n    // console.log(message)\n    this.laynesId = \"101\";\n    if (!message) {\n      return;\n    }\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // add to database\n    this.httpClient.post('http://localhost:3000/messages', message, {\n      headers: headers\n    }).subscribe(responseData => {\n      // add new message to msgArray\n      console.log(responseData.message);\n      responseData.message.id = this.laynesId;\n      this.messages.push(responseData.message);\n      this.sortAndSend();\n    });\n  }\n  // addMessage(newMessage: Message) {\n  //   if (newMessage == undefined || newMessage == null) {\n  //     return;\n  //   }\n  //   this.maxMessageId++;\n  //   newMessage.id = String(this.maxMessageId);\n  //   this.docsArray.push(newMessage)\n  //   this.storeMessages();\n  // }\n  // updateMessage(originalMessage: Message, newMessage: Message) {\n  //   if (originalMessage == null || originalMessage == null || originalMessage == undefined || originalMessage == undefined) {\n  //     return;\n  //   }\n  //   const pos = this.docsArray.indexOf(originalMessage);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   newMessage.id = originalMessage.id;\n  //   this.docsArray[pos] = newMessage;\n  //   this.storeMessages();\n  // }\n  // updateMessage(originalMessage: Message, newMessage: Message) {\n  //   if (!originalMessage || !newMessage) {\n  //     return;\n  //   }\n  //   const pos = this.messages.findIndex((d) => d.id === originalMessage.id);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   // set the id of the new Message to the id of the old Message\n  //   newMessage.id = originalMessage.id;\n  //   // newMessage._id = originalMessage._id;\n  //   const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n  //   // update database\n  //   this.httpClient\n  //     .put(\n  //       'http://localhost:3000/messages/' + originalMessage.id,\n  //       newMessage,\n  //       { headers: headers }\n  //     )\n  //     .subscribe((response: Response) => {\n  //       this.messages[pos] = newMessage;\n  //       this.sortAndSend();\n  //     });\n  // }\n  // deleteMessage(message: Message) {\n  //   if (!message) {\n  //     return;\n  //   }\n  //   const pos = this.docsArray.indexOf(message);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   this.docsArray.splice(pos, 1);\n  //   this.storeMessages();\n  // }\n  deleteMessage(message) {\n    if (!message) {\n      return;\n    }\n    const pos = this.messages.findIndex(d => d.id === message.id);\n    if (pos < 0) {\n      return;\n    }\n    // delete from database\n    this.httpClient.delete('http://localhost:3000/messages/' + message.id).subscribe(response => {\n      this.messages.splice(pos, 1);\n      this.sortAndSend();\n    });\n  }\n  getMaxMessageId() {\n    //return this.docsArray.sort(d=>d.id)[0];\n    let maxId = 0;\n    for (const message of this.messages) {\n      if (+message.id > maxId) {\n        maxId = +message.id;\n      }\n    }\n    return maxId;\n  }\n  storeMessages() {\n    this.httpClient.put(this.mongoURIdocsArray, JSON.stringify(this.messages), {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    }).subscribe({\n      next: () => this.messageListChanged.next(this.messages.slice()),\n      error: evar => console.error('Error saving docsArray: ', evar)\n    });\n  }\n  sortAndSend() {\n    this.messages.sort((a, b) => {\n      if (a.sender < b.sender) {\n        return -1;\n      }\n      if (a.sender > b.sender) {\n        return 1;\n      }\n      return 0;\n    });\n    // console.log(this.messages.slice);\n    this.messageListChanged.next(this.messages);\n  }\n}\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient));\n};\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","EventEmitter","Subject","MessageService","constructor","httpClient","getMessages","get","mongoURIdocsArray","subscribe","docs","messages","maxMessageId","getMaxMessageId","sort","a","b","sender","messageListChanged","next","slice","getMessage","id","message","console","log","addMessage","laynesId","headers","post","responseData","push","sortAndSend","deleteMessage","pos","findIndex","d","delete","response","splice","maxId","storeMessages","put","JSON","stringify","error","evar","factory","providedIn"],"sourceRoot":"","sources":["C:\\data\\A-byu\\Full Stack Dev WDD 430\\code\\wdd430\\byui-winter\\week11\\cms\\src\\app\\messages\\message.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { EventEmitter, Injectable, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Message } from './message.model';\nimport { MOCKMESSAGES } from './MOCKMESSAGES';\nimport { json } from 'body-parser';\nimport { response } from 'express';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MessageService {\n  // mongoURIdocsArray: string = \"https://wdd430cms0-default-rtdb.firebaseio.com/messages.json\";\n  mongoURIdocsArray: string = 'http://localhost:3000/messages';\n // jsondocs: Message[] = [];\n messages: Message[] = [];\n //  docsArray: Message[] = MOCKMESSAGES;\n  messageSelectedEvent = new EventEmitter<Message>();\n  messageChangedEvent = new EventEmitter<Message[]>();\n  messageListChanged = new Subject<Message[]>();\n  maxMessageId: number;\n  laynesId: string;\n\n  constructor(private httpClient: HttpClient) {};\n  // this.docsArray = MOCKMESSAGES;\n // this.docsArray = this.getMessages();\n// }\n// OnInit () {\n//   this.getMessages()\n// }\n//   // console.log('Constructor mongoDocs =', this.docsArray);\n  //  this.jsondocs = this.getMessages();\n  // this.docsArray = this.getMessages();\n\n\n   // console.log('mockDocs = ', this.docsArray);\n   // console.log(\"Web Docs Array = \", this.webdocsArray);\n   // this.maxMessageId = this.getMaxMessageId();\n   // console.log(\"Max Doc ID =\", this.maxMessageId);\n\n  // getMessages() {\n  //   this.httpClient\n  //     .get<{ message: string; docsArray: Message[] }>(this.mongoURIdocsArray)\n  //     .subscribe((docsArrayData) => {\n  //       console.log('It works!');\n  //       this.docsArray = docsArrayData.docsArray;\n  //       response.status(200).json({\n  //         message: 'Docs fetched successfully'\n  //          docsArray: docsArray });\n  //       });\n\n        //sortAndSend() {\n        // this.docsArray.sort((a, b) => {\n        //   if (a.sender < b.sender) {\n        //     return -1;\n        //   }\n        //   if (a.sender > b.sender) {\n        //     return 1;\n        //   }\n        //   return 0;\n        // });\n  //       this.messageListChanged.next(this.docsArray.slice());\n  //     });\n  // }\n\n  getMessages() {\n    this.httpClient\n      .get<{message: string, messages: Message[]}>(this.mongoURIdocsArray)\n      // .get<Message[]>(this.mongoURIdocsArray)\n      .subscribe((docs) => {\n       this.messages = docs.messages;\n       //console.log(\"getDocuuments mongoDocs =\", this.docsArray.slice());\n         this.maxMessageId = this.getMaxMessageId();\n       // Alphabetical Sort\n        this.messages.sort((a, b) => {\n          if (a.sender < b.sender) {\n            return -1;\n          }\n          if (a.sender > b.sender) {\n            return 1;\n          }\n          return 0;\n        });\n        // console.log(\"Returned:\", this.docsArray);\n       // console.log(this.messages);\n        this.messageListChanged.next(this.messages.slice());\n      });\n     // console.log(this.docsArray.slice());\n     // console.log(\"Returned Slice:\", this.docsArray);\n     return this.messages.slice();\n  }\n\n  getMessage(id: string): Message {\n    for (const message of this.messages) {\n      if (message.id == id) {\n       console.log(id)\n        return message;\n      }\n    }\n    return null;\n  }\n\n  addMessage(message: Message) {\n    // console.log(message)\n    this.laynesId = \"101\"\n    if (!message) {\n      return;\n    }\n\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    // add to database\n    this.httpClient\n      .post<{ messages: string; message: Message }>(\n        'http://localhost:3000/messages',\n        message,\n        { headers: headers }\n      )\n      .subscribe((responseData) => {\n        // add new message to msgArray\n        console.log(responseData.message);\n        responseData.message.id = this.laynesId;\n        this.messages.push(responseData.message);\n        this.sortAndSend();\n      });\n  }\n\n  // addMessage(newMessage: Message) {\n  //   if (newMessage == undefined || newMessage == null) {\n  //     return;\n  //   }\n\n  //   this.maxMessageId++;\n  //   newMessage.id = String(this.maxMessageId);\n  //   this.docsArray.push(newMessage)\n  //   this.storeMessages();\n  // }\n\n  // updateMessage(originalMessage: Message, newMessage: Message) {\n  //   if (originalMessage == null || originalMessage == null || originalMessage == undefined || originalMessage == undefined) {\n  //     return;\n  //   }\n\n  //   const pos = this.docsArray.indexOf(originalMessage);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n\n  //   newMessage.id = originalMessage.id;\n  //   this.docsArray[pos] = newMessage;\n  //   this.storeMessages();\n  // }\n\n  // updateMessage(originalMessage: Message, newMessage: Message) {\n  //   if (!originalMessage || !newMessage) {\n  //     return;\n  //   }\n\n  //   const pos = this.messages.findIndex((d) => d.id === originalMessage.id);\n\n  //   if (pos < 0) {\n  //     return;\n  //   }\n\n  //   // set the id of the new Message to the id of the old Message\n  //   newMessage.id = originalMessage.id;\n  //   // newMessage._id = originalMessage._id;\n\n  //   const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n  //   // update database\n  //   this.httpClient\n  //     .put(\n  //       'http://localhost:3000/messages/' + originalMessage.id,\n  //       newMessage,\n  //       { headers: headers }\n  //     )\n  //     .subscribe((response: Response) => {\n  //       this.messages[pos] = newMessage;\n  //       this.sortAndSend();\n  //     });\n  // }\n\n  // deleteMessage(message: Message) {\n  //   if (!message) {\n  //     return;\n  //   }\n  //   const pos = this.docsArray.indexOf(message);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   this.docsArray.splice(pos, 1);\n  //   this.storeMessages();\n  // }\n\n  deleteMessage(message: Message) {\n    if (!message) {\n      return;\n    }\n\n    const pos = this.messages.findIndex((d) => d.id === message.id);\n\n    if (pos < 0) {\n      return;\n    }\n\n    // delete from database\n    this.httpClient\n      .delete('http://localhost:3000/messages/' + message.id)\n      .subscribe((response: Response) => {\n        this.messages.splice(pos, 1);\n        this.sortAndSend();\n      });\n  }\n\n  getMaxMessageId(): number {\n    //return this.docsArray.sort(d=>d.id)[0];\n    let maxId = 0;\n    for (const message of this.messages) {\n      if (+message.id > maxId) {\n        maxId = +message.id;\n      }\n    }\n    return maxId;\n  }\n\n  storeMessages() {\n    this.httpClient\n      .put(this.mongoURIdocsArray, JSON.stringify(this.messages), {\n        headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n      })\n      .subscribe({\n        next: () => this.messageListChanged.next(this.messages.slice()),\n        error: (evar) => console.error('Error saving docsArray: ', evar),\n      });\n  }\n\n  sortAndSend() {\n    this.messages.sort((a, b) => {\n      if (a.sender < b.sender) {\n        return -1;\n      }\n      if (a.sender > b.sender) {\n        return 1;\n      }\n      return 0;\n    });\n    // console.log(this.messages.slice);\n    this.messageListChanged.next(this.messages);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}