{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DocumentService {\n  constructor(httpCient) {\n    this.httpCient = httpCient;\n    this.fbURIdocuments = \"https://wdd430cms0-default-rtdb.firebaseio.com/documents.json\";\n    this.documents = [];\n    this.documentSelectedEvent = new EventEmitter();\n    this.documentChangedEvent = new EventEmitter();\n    this.documentListChanged = new Subject();\n    //this.documents = MOCKDOCUMENTS;\n    this.documents = this.getDocuments();\n    this.maxDocumentId = this.getMaxDocumentId();\n  }\n  getDocuments() {\n    this.httpCient.get(this.fbURIdocuments).subscribe(docs => {\n      //console.log(docs);\n      this.documents = docs;\n      this.maxDocumentId = this.getMaxId();\n      // sorting alphabeticall\n      this.documents.sort((a, b) => {\n        if (a.name < b.name) {\n          return -1;\n        }\n        if (a.name > b.name) {\n          return 1;\n        }\n        return 0;\n      });\n      this.documentListChanged.next(this.documents.slice());\n    });\n    return this.documents.slice();\n  }\n  getDocument(id) {\n    for (const document of this.documents) {\n      if (document.id == id) {\n        //console.log(\"found!\")\n        return document;\n      }\n    }\n    return null;\n  }\n  addDocument(newDocument) {\n    if (newDocument == undefined || newDocument == null) {\n      return;\n    }\n    this.maxDocumentId++;\n    newDocument.id = String(this.maxDocumentId);\n    this.documents.push(newDocument);\n    //this.documentListChanged.next(this.getDocuments())\n    this.storeDocuments();\n  }\n  updateDocument(originalDocument, newDocument) {\n    if (originalDocument == null || originalDocument == null || originalDocument == undefined || originalDocument == undefined) {\n      return;\n    }\n    const pos = this.documents.indexOf(originalDocument);\n    if (pos < 0) {\n      return;\n    }\n    newDocument.id = originalDocument.id;\n    this.documents[pos] = newDocument;\n    //this.documentListChanged.next(this.getDocuments())\n    this.storeDocuments();\n  }\n  deleteDocument(document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.documents.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    this.documents.splice(pos, 1);\n    //this.documentChangedEvent.emit(this.documents.slice());\n    //this.documentListChanged.next(this.getDocuments());\n    this.storeDocuments();\n  }\n  getMaxDocumentId() {\n    //return this.documents.sort(d=>d.id)[0];\n    let maxId = 0;\n    for (const document of this.documents) {\n      if (+document.id > maxId) {\n        maxId = +document.id;\n      }\n    }\n    return maxId;\n  }\n  storeDocuments() {\n    this.httpCient.put(this.fbURIdocuments, JSON.stringify(this.documents), {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      })\n    }).subscribe({\n      next: () => this.documentListChanged.next(this.documents.slice()),\n      error: e => console.error('Error saving documents: ', e)\n    });\n  }\n}\nDocumentService.ɵfac = function DocumentService_Factory(t) {\n  return new (t || DocumentService)(i0.ɵɵinject(i1.HttpClient));\n};\nDocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DocumentService,\n  factory: DocumentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","EventEmitter","Subject","DocumentService","constructor","httpCient","documents","getDocuments","maxDocumentId","getMaxDocumentId","get","fbURIdocuments","subscribe","docs","getMaxId","sort","a","b","name","documentListChanged","next","slice","getDocument","id","document","addDocument","newDocument","undefined","String","push","storeDocuments","updateDocument","originalDocument","pos","indexOf","deleteDocument","splice","maxId","put","JSON","stringify","headers","error","e","console","factory","providedIn"],"sourceRoot":"","sources":["C:\\data\\A-byu\\Full Stack Dev WDD 430\\code\\wdd430\\byui-winter\\week9\\cms\\src\\app\\documents\\document.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { EventEmitter, Injectable, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Document } from './documents.model';\nimport { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DocumentService {\n  fbURIdocuments: string = \"https://wdd430cms0-default-rtdb.firebaseio.com/documents.json\";\n  documents: Document[] = [];\n  documentSelectedEvent = new EventEmitter<Document>();\n  documentChangedEvent = new EventEmitter<Document[]>();\n  documentListChanged = new Subject<Document[]>();\n  maxDocumentId: number;\n\n  constructor(private httpCient: HttpClient) {\n    //this.documents = MOCKDOCUMENTS;\n    this.documents = this.getDocuments();\n    this.maxDocumentId = this.getMaxDocumentId();\n  }\n\n  getDocuments(): Document[] {\n\n    this.httpCient.get<Document[]>(this.fbURIdocuments).subscribe(docs => {\n      //console.log(docs);\n      this.documents = docs;\n      this.maxDocumentId = this.getMaxId();\n\t  // sorting alphabeticall\n      this.documents.sort((a, b) => {\n        if (a.name < b.name) {\n          return -1;\n        }\n        if (a.name > b.name) {\n          return 1;\n        }\n        return 0;\n      });\n      this.documentListChanged.next(this.documents.slice())\n    });\n\n    return this.documents.slice();\n  }\n\n  getDocument(id: string): Document {\n    for (const document of this.documents) {\n      if (document.id == id) {\n        //console.log(\"found!\")\n        return document;\n      }\n    }\n    return null;\n  }\n\n  addDocument(newDocument: Document) {\n    if (newDocument == undefined || newDocument == null) {\n      return;\n    }\n\n    this.maxDocumentId++;\n    newDocument.id = String(this.maxDocumentId);\n    this.documents.push(newDocument)\n    //this.documentListChanged.next(this.getDocuments())\n    this.storeDocuments();\n  }\n  updateDocument(originalDocument: Document, newDocument: Document) {\n    if (originalDocument == null || originalDocument == null || originalDocument == undefined || originalDocument == undefined) {\n      return;\n    }\n\n    const pos = this.documents.indexOf(originalDocument);\n    if (pos < 0) {\n      return;\n    }\n\n    newDocument.id = originalDocument.id;\n    this.documents[pos] = newDocument;\n    //this.documentListChanged.next(this.getDocuments())\n    this.storeDocuments();\n  }\n\n  deleteDocument(document: Document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.documents.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    this.documents.splice(pos, 1);\n    //this.documentChangedEvent.emit(this.documents.slice());\n    //this.documentListChanged.next(this.getDocuments());\n    this.storeDocuments();\n  }\n\n  getMaxDocumentId(): number {\n    //return this.documents.sort(d=>d.id)[0];\n    let maxId = 0\n    for (const document of this.documents) {\n      if (+document.id > maxId) {\n        maxId = +document.id;\n      }\n    }\n    return maxId;\n  }\n\n  storeDocuments() {\n    this.httpCient.put(this.fbURIdocuments, JSON.stringify(this.documents)\n      , { headers: new HttpHeaders({ \"Content-Type\": \"application/json\" }) })\n      .subscribe(\n        {\n          next: () => this.documentListChanged.next(this.documents.slice())\n          , error: (e) => console.error('Error saving documents: ', e)\n        }\n      )\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}