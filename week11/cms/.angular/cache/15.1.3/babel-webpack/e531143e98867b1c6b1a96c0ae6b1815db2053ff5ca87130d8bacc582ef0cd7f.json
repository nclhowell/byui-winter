{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\nimport * as i0 from \"@angular/core\";\nexport class DocumentService {\n  constructor() {\n    this.document = [];\n    this.maxid = 0;\n    // Observables\n    this.DocumentListChanged = new Subject();\n    // Event Emitters\n    this.documentSelectedEvent = new EventEmitter();\n    this.documentChangedEvent = new EventEmitter();\n    this.document = MOCKDOCUMENTS;\n  }\n  getDocuments() {\n    return this.document.slice();\n  }\n  deleteDocument(document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.document.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    this.document.splice(pos, 1);\n    //  this.documentChangedEvent.emit(document);\n    this.DocumentListChanged.next(this.document.slice());\n  }\n  getMaxDocumentId(id) {\n    let maxId = 0;\n    let currentId = 0;\n    for (let document of this.document) {\n      currentId = parseInt(document.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n      console.log(maxId);\n    }\n    console.log(maxId.toString);\n    return maxId.toString();\n  }\n  // getMaxId(document: Document) {\n  //  document.forEach(this.returnMax);\n  // }\n  // maxval = this.document.forEach(returnMax(\n  // returnMax(document: Document) {\n  //  console.log (\"Whazzup\");\n  // };\n  // ));\n  // this.document.forEach(returnMax()): Document\n  // if (parseInt(document.id))\n  // currentId: Number;\n  // return currentId;\n  // }\n  getDocument(id) {\n    for (let document of this.document) {\n      if (document.id === id) {\n        console.log(document);\n        return document;\n      }\n    }\n  }\n}\nDocumentService.ɵfac = function DocumentService_Factory(t) {\n  return new (t || DocumentService)();\n};\nDocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DocumentService,\n  factory: DocumentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,YAAY,QAAQ,eAAe;AACxD,SAASC,OAAO,QAAQ,MAAM;AAE9B,SAASC,aAAa,QAAQ,iBAAiB;;AAK/C,OAAM,MAAOC,eAAe;EAW1BC;IAVA,aAAQ,GAAe,EAAE;IACzB,UAAK,GAAG,CAAC;IAET;IACA,wBAAmB,GAAG,IAAIH,OAAO,EAAc;IAEjD;IACE,0BAAqB,GAAG,IAAID,YAAY,EAAY;IACpD,yBAAoB,GAAG,IAAIA,YAAY,EAAY;IAGjD,IAAI,CAACK,QAAQ,GAAGH,aAAa;EAC/B;EAEAI,YAAY;IACV,OAAO,IAAI,CAACD,QAAQ,CAACE,KAAK,EAAE;EAC9B;EAEAC,cAAc,CAACH,QAAkB;IAC/B,IAAI,CAACA,QAAQ,EAAE;MACZ;;IAEH,MAAMI,GAAG,GAAG,IAAI,CAACJ,QAAQ,CAACK,OAAO,CAACL,QAAQ,CAAC;IAC3C,IAAII,GAAG,GAAG,CAAC,EAAE;MACV;;IAEH,IAAI,CAACJ,QAAQ,CAACM,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC;IAC9B;IACE,IAAI,CAACG,mBAAmB,CAACC,IAAI,CAAC,IAAI,CAACR,QAAQ,CAACE,KAAK,EAAE,CAAC;EACvD;EAGCO,gBAAgB,CAACC,EAAU;IACzB,IAAIC,KAAK,GAAG,CAAC;IACb,IAAIC,SAAS,GAAG,CAAC;IACf,KAAK,IAAIZ,QAAQ,IAAI,IAAI,CAACA,QAAQ,EAAE;MAClCY,SAAS,GAAGC,QAAQ,CAACb,QAAQ,CAACU,EAAE,CAAC;MACjC,IAAIE,SAAS,GAAGD,KAAK,EAAE;QACtBA,KAAK,GAAGC,SAAS;;MAEjBE,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;;IAEpBG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAACK,QAAQ,CAAC;IAC3B,OAAOL,KAAK,CAACK,QAAQ,EAAE;EACzB;EAEL;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAIA;EAEC;EACA;EACA;EACA;EAGEC,WAAW,CAACP,EAAU;IACrB,KAAK,IAAIV,QAAQ,IAAI,IAAI,CAACA,QAAQ,EAAE;MAClC,IAAIA,QAAQ,CAACU,EAAE,KAAKA,EAAE,EAAE;QACxBI,OAAO,CAACC,GAAG,CAACf,QAAQ,CAAC;QAClB,OAAOA,QAAQ;;;EAGrB;;AA1EUF,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAoB,SAAfpB,eAAe;EAAAqB,YAFd;AAAM","names":["EventEmitter","Subject","MOCKDOCUMENTS","DocumentService","constructor","document","getDocuments","slice","deleteDocument","pos","indexOf","splice","DocumentListChanged","next","getMaxDocumentId","id","maxId","currentId","parseInt","console","log","toString","getDocument","factory","providedIn"],"sourceRoot":"","sources":["C:\\data\\A-byu\\Full Stack Dev WDD 430\\code\\wdd430\\byui-winter\\week7\\cms\\src\\app\\documents\\document.service.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Document } from './documents.model';\nimport { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DocumentService {\n  document: Document[] = [];\n  maxid = 0;\n\n  // Observables\n  DocumentListChanged = new Subject<Document[]>();\n\n// Event Emitters\n  documentSelectedEvent = new EventEmitter<Document>();\n  documentChangedEvent = new EventEmitter<Document>();\n\n  constructor() {\n    this.document = MOCKDOCUMENTS;\n  };\n\n  getDocuments() {\n    return this.document.slice();\n  };\n\n  deleteDocument(document: Document) {\n    if (!document) {\n       return;\n    }\n    const pos = this.document.indexOf(document);\n    if (pos < 0) {\n       return;\n    }\n    this.document.splice(pos, 1);\n  //  this.documentChangedEvent.emit(document);\n    this.DocumentListChanged.next(this.document.slice());\n };\n\n\n  getMaxDocumentId(id: string): String {\n    let maxId = 0;\n    let currentId = 0;\n      for (let document of this.document) {\n        currentId = parseInt(document.id);\n        if (currentId > maxId) {\n         maxId = currentId;\n         }\n         console.log(maxId);\n       }\n       console.log(maxId.toString);\n       return maxId.toString();\n     }\n\n// getMaxId(document: Document) {\n//  document.forEach(this.returnMax);\n// }\n\n// maxval = this.document.forEach(returnMax(\n// returnMax(document: Document) {\n//  console.log (\"Whazzup\");\n// };\n// ));\n\n\n\n// this.document.forEach(returnMax()): Document\n\n // if (parseInt(document.id))\n // currentId: Number;\n // return currentId;\n // }\n\n\n   getDocument(id: string): Document {\n    for (let document of this.document) {\n      if (document.id === id) {\n      console.log(document);\n         return document;\n       }\n     }\n   }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}