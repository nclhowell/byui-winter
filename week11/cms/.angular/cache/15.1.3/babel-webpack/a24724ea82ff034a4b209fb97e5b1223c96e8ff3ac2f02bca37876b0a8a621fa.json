{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DocumentService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    // mongoURIdocuments: string = \"https://wdd430cms0-default-rtdb.firebaseio.com/documents.json\";\n    this.mongoURIdocuments = \"http://localhost:3000/documents\";\n    this.documents = [];\n    this.documentSelectedEvent = new EventEmitter();\n    // documentChangedEvent = new EventEmitter<Document[]>();\n    this.documentListChanged = new Subject();\n    // this.documents = MOCKDOCUMENTS;\n    // this.webdocuments = this.getDocuments();\n    this.documents = this.getDocuments();\n    // console.log(\"mockDocs = \", this.documents);\n    // console.log(\"Web Docs Array = \", this.webdocuments);\n    // this.maxDocumentId = this.getMaxDocumentId();\n    // console.log(\"Max Doc ID =\", this.maxDocumentId);\n  }\n\n  getDocuments() {\n    this.httpClient.get(this.mongoURIdocuments).subscribe(docs => {\n      console.log(\"mongoDocs =\", docs);\n      this.documents = docs;\n      // console.log(this.documents)\n      //this.maxDocumentId = this.getMaxDocumentId();\n      // Alphabetical Sort\n      this.documents.sort((a, b) => {\n        if (a.name < b.name) {\n          return -1;\n        }\n        if (a.name > b.name) {\n          return 1;\n        }\n        return 0;\n      });\n      this.documentListChanged.next(this.documents.slice());\n    });\n    return this.documents.slice();\n  }\n  getDocument(id) {\n    for (const document of this.documents) {\n      if (document.id == id) {\n        //console.log(\"found!\")\n        return document;\n      }\n    }\n    return null;\n  }\n  addDocument(document) {\n    if (!document) {\n      return;\n    }\n    // make sure id of the new Document is empty\n    document.id = '';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // add to database\n    this.httpClient.post('http://localhost:3000/documents', document, {\n      headers: headers\n    }).subscribe(responseData => {\n      // add new document to documents\n      this.documents.push(responseData.document);\n      this.sortAndSend();\n    });\n  }\n  // addDocument(newDocument: Document) {\n  //   if (newDocument == undefined || newDocument == null) {\n  //     return;\n  //   }\n  //   this.maxDocumentId++;\n  //   newDocument.id = String(this.maxDocumentId);\n  //   this.documents.push(newDocument)\n  //   this.storeDocuments();\n  // }\n  // updateDocument(originalDocument: Document, newDocument: Document) {\n  //   if (originalDocument == null || originalDocument == null || originalDocument == undefined || originalDocument == undefined) {\n  //     return;\n  //   }\n  //   const pos = this.documents.indexOf(originalDocument);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   newDocument.id = originalDocument.id;\n  //   this.documents[pos] = newDocument;\n  //   this.storeDocuments();\n  // }\n  updateDocument(originalDocument, newDocument) {\n    if (!originalDocument || !newDocument) {\n      return;\n    }\n    const pos = this.documents.findIndex(d => d.id === originalDocument.id);\n    if (pos < 0) {\n      return;\n    }\n    // set the id of the new Document to the id of the old Document\n    newDocument.id = originalDocument.id;\n    // newDocument._id = originalDocument._id;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // update database\n    this.httpClient.put('http://localhost:3000/documents/' + originalDocument.id, newDocument, {\n      headers: headers\n    }).subscribe(response => {\n      this.documents[pos] = newDocument;\n      this.sortAndSend();\n    });\n  }\n  // deleteDocument(document: Document) {\n  //   if (!document) {\n  //     return;\n  //   }\n  //   const pos = this.documents.indexOf(document);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   this.documents.splice(pos, 1);\n  //   this.storeDocuments();\n  // }\n  deleteDocument(document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.documents.findIndex(d => d.id === document.id);\n    if (pos < 0) {\n      return;\n    }\n    // delete from database\n    this.httpClient.delete('http://localhost:3000/documents/' + document.id).subscribe(response => {\n      this.documents.splice(pos, 1);\n      this.sortAndSend();\n    });\n  }\n  getMaxDocumentId() {\n    //return this.documents.sort(d=>d.id)[0];\n    let maxId = 0;\n    for (const document of this.documents) {\n      if (+document.id > maxId) {\n        maxId = +document.id;\n      }\n    }\n    return maxId;\n  }\n  storeDocuments() {\n    this.httpClient.put(this.mongoURIdocuments, JSON.stringify(this.documents), {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      })\n    }).subscribe({\n      next: () => this.documentListChanged.next(this.documents.slice()),\n      error: evar => console.error('Error saving documents: ', evar)\n    });\n  }\n  sortAndSend() {\n    this.documents.sort((a, b) => {\n      if (a.name < b.name) {\n        return -1;\n      }\n      if (a.name > b.name) {\n        return 1;\n      }\n      return 0;\n    });\n    this.documentListChanged.next(this.documents.slice());\n  }\n}\nDocumentService.ɵfac = function DocumentService_Factory(t) {\n  return new (t || DocumentService)(i0.ɵɵinject(i1.HttpClient));\n};\nDocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DocumentService,\n  factory: DocumentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","EventEmitter","Subject","DocumentService","constructor","httpClient","documents","getDocuments","get","mongoURIdocuments","subscribe","docs","console","log","sort","a","b","name","documentListChanged","next","slice","getDocument","id","document","addDocument","headers","post","responseData","push","sortAndSend","updateDocument","originalDocument","newDocument","pos","findIndex","d","put","response","deleteDocument","delete","splice","getMaxDocumentId","maxId","storeDocuments","JSON","stringify","error","evar","factory","providedIn"],"sourceRoot":"","sources":["C:\\data\\A-byu\\Full Stack Dev WDD 430\\code\\wdd430\\byui-winter\\week11\\cms\\src\\app\\documents\\document.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { EventEmitter, Injectable, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Document } from './documents.model';\nimport { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DocumentService {\n  // mongoURIdocuments: string = \"https://wdd430cms0-default-rtdb.firebaseio.com/documents.json\";\n  mongoURIdocuments: string = \"http://localhost:3000/documents\";\n documents: Document[] = [];\n  documentSelectedEvent = new EventEmitter<Document>();\n  // documentChangedEvent = new EventEmitter<Document[]>();\n  documentListChanged = new Subject<Document[]>();\n  maxDocumentId: number;\n\n  constructor(private httpClient: HttpClient) {\n // this.documents = MOCKDOCUMENTS;\n // this.webdocuments = this.getDocuments();\n this.documents = this.getDocuments();\n // console.log(\"mockDocs = \", this.documents);\n // console.log(\"Web Docs Array = \", this.webdocuments);\n // this.maxDocumentId = this.getMaxDocumentId();\n // console.log(\"Max Doc ID =\", this.maxDocumentId);\n  }\n\n  getDocuments(): Document [] {\n    this.httpClient.get<Document[]>(this.mongoURIdocuments).subscribe(docs => {\n      console.log(\"mongoDocs =\", docs);\n      this.documents = docs;\n     // console.log(this.documents)\n     //this.maxDocumentId = this.getMaxDocumentId();\n\n\t  // Alphabetical Sort\n      this.documents.sort((a, b) => {\n        if (a.name < b.name) {\n          return -1;\n        }\n        if (a.name > b.name) {\n          return 1;\n        }\n        return 0;\n      });\n      this.documentListChanged.next(this.documents.slice())\n    });\n    return this.documents.slice();\n  }\n\n  getDocument(id: string): Document {\n    for (const document of this.documents) {\n      if (document.id == id) {\n        //console.log(\"found!\")\n        return document;\n      }\n    }\n    return null;\n  }\n  addDocument(document: Document) {\n    if (!document) {\n      return;\n    }\n\n    // make sure id of the new Document is empty\n    document.id = '';\n\n    const headers = new HttpHeaders({'Content-Type': 'application/json'});\n\n    // add to database\n    this.httpClient.post<{ message: string, document: Document }>('http://localhost:3000/documents',\n      document,\n      { headers: headers })\n      .subscribe(\n        (responseData) => {\n          // add new document to documents\n          this.documents.push(responseData.document);\n          this.sortAndSend();\n        }\n      );\n  }\n\n  // addDocument(newDocument: Document) {\n  //   if (newDocument == undefined || newDocument == null) {\n  //     return;\n  //   }\n\n  //   this.maxDocumentId++;\n  //   newDocument.id = String(this.maxDocumentId);\n  //   this.documents.push(newDocument)\n  //   this.storeDocuments();\n  // }\n\n  // updateDocument(originalDocument: Document, newDocument: Document) {\n  //   if (originalDocument == null || originalDocument == null || originalDocument == undefined || originalDocument == undefined) {\n  //     return;\n  //   }\n\n  //   const pos = this.documents.indexOf(originalDocument);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n\n  //   newDocument.id = originalDocument.id;\n  //   this.documents[pos] = newDocument;\n  //   this.storeDocuments();\n  // }\n\n  updateDocument(originalDocument: Document, newDocument: Document) {\n    if (!originalDocument || !newDocument) {\n      return;\n    }\n\n    const pos = this.documents.findIndex(d => d.id === originalDocument.id);\n\n    if (pos < 0) {\n      return;\n    }\n\n    // set the id of the new Document to the id of the old Document\n    newDocument.id = originalDocument.id;\n    // newDocument._id = originalDocument._id;\n\n    const headers = new HttpHeaders({'Content-Type': 'application/json'});\n\n    // update database\n    this.httpClient.put('http://localhost:3000/documents/' + originalDocument.id,\n      newDocument, { headers: headers })\n      .subscribe(\n        (response: Response) => {\n          this.documents[pos] = newDocument;\n          this.sortAndSend();\n        }\n      );\n  }\n\n\n  // deleteDocument(document: Document) {\n  //   if (!document) {\n  //     return;\n  //   }\n  //   const pos = this.documents.indexOf(document);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   this.documents.splice(pos, 1);\n  //   this.storeDocuments();\n  // }\n\n  deleteDocument(document: Document) {\n\n    if (!document) {\n      return;\n    }\n\n    const pos = this.documents.findIndex(d => d.id === document.id);\n\n    if (pos < 0) {\n      return;\n    }\n\n    // delete from database\n    this.httpClient.delete('http://localhost:3000/documents/' + document.id)\n      .subscribe(\n        (response: Response) => {\n          this.documents.splice(pos, 1);\n          this.sortAndSend();\n        }\n      );\n  }\n\n  getMaxDocumentId(): number {\n    //return this.documents.sort(d=>d.id)[0];\n    let maxId = 0\n    for (const document of this.documents) {\n      if (+document.id > maxId) {\n        maxId = +document.id;\n      }\n    }\n    return maxId;\n  }\n\n  storeDocuments() {\n    this.httpClient.put(this.mongoURIdocuments, JSON.stringify(this.documents)\n      , { headers: new HttpHeaders({ \"Content-Type\": \"application/json\" }) })\n      .subscribe(\n        {\n          next: () => this.documentListChanged.next(this.documents.slice())\n          , error: (evar) => console.error('Error saving documents: ', evar)\n        }\n      )\n  }\n\n sortAndSend(){\n    this.documents.sort((a,b)=>{\n      if (a.name < b.name) {\n        return -1;\n      }\n      if (a.name > b.name) {\n        return 1;\n      }\n      return 0;\n    });\n    this.documentListChanged.next(this.documents.slice())\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}