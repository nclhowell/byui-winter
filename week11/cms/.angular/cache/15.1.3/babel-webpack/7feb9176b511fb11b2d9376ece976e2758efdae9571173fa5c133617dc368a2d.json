{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MessageService {\n  constructor(httpCient) {\n    this.httpCient = httpCient;\n    this.fbURImessages = \"https://wdd430cms0-default-rtdb.firebaseio.com/messages.json\";\n    this.messages = [];\n    this.messageSelectedEvent = new EventEmitter();\n    // messageChangedEvent = new EventEmitter<Message[]>();\n    this.messageListChanged = new Subject();\n    //this.messages = MOCKMESSAGES;\n    this.messages = this.getMessages();\n    this.maxMessageId = this.getMaxMessageId();\n  }\n  getMessages() {\n    this.httpCient.get(this.fbURImessages).subscribe(docs => {\n      // console.log(docs);\n      this.messages = docs;\n      this.maxMessageId = this.getMaxMessageId();\n      // Alphabetical Sort\n      // this.messages.sort((a, b) => {\n      //   if (a.name < b.name) {\n      //     return -1;\n      //   }\n      //   if (a.name > b.name) {\n      //     return 1;\n      //   }\n      //   return 0;\n      // });\n      this.messageListChanged.next(this.messages.slice());\n    });\n    return this.messages.slice();\n  }\n  getMessage(id) {\n    for (const message of this.messages) {\n      if (message.id == id) {\n        console.log(\"message ID = \", id);\n        return message;\n      }\n    }\n    return null;\n  }\n  addMessage(newMessage) {\n    if (newMessage == undefined || newMessage == null) {\n      return;\n    }\n    this.maxMessageId++;\n    newMessage.id = String(this.maxMessageId);\n    this.messages.push(newMessage);\n    //this.messageListChanged.next(this.getMessages())\n    this.storeMessages();\n  }\n  updateMessage(originalMessage, newMessage) {\n    if (originalMessage == null || originalMessage == null || originalMessage == undefined || originalMessage == undefined) {\n      return;\n    }\n    const pos = this.messages.indexOf(originalMessage);\n    if (pos < 0) {\n      return;\n    }\n    newMessage.id = originalMessage.id;\n    this.messages[pos] = newMessage;\n    //this.messageListChanged.next(this.getMessages())\n    this.storeMessages();\n  }\n  deleteMessage(message) {\n    if (!message) {\n      return;\n    }\n    const pos = this.messages.indexOf(message);\n    if (pos < 0) {\n      return;\n    }\n    this.messages.splice(pos, 1);\n    //this.messageChangedEvent.emit(this.messages.slice());\n    //this.messageListChanged.next(this.getMessages());\n    this.storeMessages();\n  }\n  getMaxMessageId() {\n    //return this.messages.sort(d=>d.id)[0];\n    let maxId = 0;\n    for (const message of this.messages) {\n      if (+message.id > maxId) {\n        maxId = +message.id;\n      }\n    }\n    return maxId;\n  }\n  storeMessages() {\n    this.httpCient.put(this.fbURImessages, JSON.stringify(this.messages), {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      })\n    }).subscribe({\n      next: () => this.messageListChanged.next(this.messages.slice()),\n      error: evar => console.error('Error saving messages: ', evar)\n    });\n  }\n}\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient));\n};\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}