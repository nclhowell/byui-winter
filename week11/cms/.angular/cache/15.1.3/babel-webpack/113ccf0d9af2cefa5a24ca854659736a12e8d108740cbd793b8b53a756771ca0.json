{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DocumentService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    // mongoURIdocuments: string = \"https://wdd430cms0-default-rtdb.firebaseio.com/documents.json\";\n    this.mongoURIdocuments = 'http://localhost:3000/documents';\n    this.documents = [];\n    this.documentSelectedEvent = new EventEmitter();\n    // documentChangedEvent = new EventEmitter<Document[]>();\n    this.documentListChanged = new Subject();\n    // this.documents = MOCKDOCUMENTS;\n    // this.webdocuments = this.getDocuments();\n    // this.documents = this.getDocuments();\n    console.log('mockDocs = ', this.documents);\n    // console.log(\"Web Docs Array = \", this.webdocuments);\n    // this.maxDocumentId = this.getMaxDocumentId();\n    // console.log(\"Max Doc ID =\", this.maxDocumentId);\n  }\n\n  getDocuments() {\n    this.httpClient.get(this.mongoURIdocuments).subscribe(docs => {\n      this.documents = docs;\n      console.log('mongoDocs =', docs);\n      this.maxDocumentId = this.getMaxDocumentId();\n      // Alphabetical Sort\n      this.documents.sort((a, b) => {\n        if (a.name < b.name) {\n          return -1;\n        }\n        if (a.name > b.name) {\n          return 1;\n        }\n        return 0;\n      });\n      this.documentListChanged.next(this.documents.slice());\n    });\n    return this.documents.slice();\n  }\n  getDocument(id) {\n    for (const document of this.documents) {\n      if (document.id == id) {\n        //console.log(\"found!\")\n        return document;\n      }\n    }\n    return null;\n  }\n  addDocument(document) {\n    if (!document) {\n      return;\n    }\n    // make sure id of the new Document is empty\n    document.id = '';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // add to database\n    this.httpClient.post('http://localhost:3000/documents', document, {\n      headers: headers\n    }).subscribe(responseData => {\n      // add new document to documents\n      this.documents.push(responseData.document);\n      this.sortAndSend();\n    });\n  }\n  // addDocument(newDocument: Document) {\n  //   if (newDocument == undefined || newDocument == null) {\n  //     return;\n  //   }\n  //   this.maxDocumentId++;\n  //   newDocument.id = String(this.maxDocumentId);\n  //   this.documents.push(newDocument)\n  //   this.storeDocuments();\n  // }\n  // updateDocument(originalDocument: Document, newDocument: Document) {\n  //   if (originalDocument == null || originalDocument == null || originalDocument == undefined || originalDocument == undefined) {\n  //     return;\n  //   }\n  //   const pos = this.documents.indexOf(originalDocument);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   newDocument.id = originalDocument.id;\n  //   this.documents[pos] = newDocument;\n  //   this.storeDocuments();\n  // }\n  updateDocument(originalDocument, newDocument) {\n    if (!originalDocument || !newDocument) {\n      return;\n    }\n    const pos = this.documents.findIndex(d => d.id === originalDocument.id);\n    if (pos < 0) {\n      return;\n    }\n    // set the id of the new Document to the id of the old Document\n    newDocument.id = originalDocument.id;\n    // newDocument._id = originalDocument._id;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // update database\n    this.httpClient.put('http://localhost:3000/documents/' + originalDocument.id, newDocument, {\n      headers: headers\n    }).subscribe(response => {\n      this.documents[pos] = newDocument;\n      this.sortAndSend();\n    });\n  }\n  // deleteDocument(document: Document) {\n  //   if (!document) {\n  //     return;\n  //   }\n  //   const pos = this.documents.indexOf(document);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   this.documents.splice(pos, 1);\n  //   this.storeDocuments();\n  // }\n  deleteDocument(document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.documents.findIndex(d => d.id === document.id);\n    if (pos < 0) {\n      return;\n    }\n    // delete from database\n    this.httpClient.delete('http://localhost:3000/documents/' + document.id).subscribe(response => {\n      this.documents.splice(pos, 1);\n      this.sortAndSend();\n    });\n  }\n  getMaxDocumentId() {\n    //return this.documents.sort(d=>d.id)[0];\n    let maxId = 0;\n    for (const document of this.documents) {\n      if (+document.id > maxId) {\n        maxId = +document.id;\n      }\n    }\n    return maxId;\n  }\n  storeDocuments() {\n    this.httpClient.put(this.mongoURIdocuments, JSON.stringify(this.documents), {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    }).subscribe({\n      next: () => this.documentListChanged.next(this.documents.slice()),\n      error: evar => console.error('Error saving documents: ', evar)\n    });\n  }\n  sortAndSend() {\n    this.documents.sort((a, b) => {\n      if (a.name < b.name) {\n        return -1;\n      }\n      if (a.name > b.name) {\n        return 1;\n      }\n      return 0;\n    });\n    this.documentListChanged.next(this.documents.slice());\n  }\n}\nDocumentService.ɵfac = function DocumentService_Factory(t) {\n  return new (t || DocumentService)(i0.ɵɵinject(i1.HttpClient));\n};\nDocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DocumentService,\n  factory: DocumentService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}