{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DocumentService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    // mongoURIdocuments: string = \"https://wdd430cms0-default-rtdb.firebaseio.com/documents.json\";\n    this.mongoURIdocuments = 'http://localhost:3000/documents';\n    this.documentSelectedEvent = new EventEmitter();\n    // documentChangedEvent = new EventEmitter<Document[]>();\n    this.documentListChanged = new Subject();\n    //  this.documents = MOCKDOCUMENTS;\n    // this.webdocuments = this.getDocuments();\n    this.documents = this.getDocuments();\n    console.log('mockDocs = ', this.documents);\n    // console.log(\"Web Docs Array = \", this.webdocuments);\n    // this.maxDocumentId = this.getMaxDocumentId();\n    // console.log(\"Max Doc ID =\", this.maxDocumentId);\n  }\n\n  getDocuments() {\n    this.documents = this.httpClient.request('GET', this.mongoURIdocuments, {\n      responseType: 'json'\n    });\n    // this.documents.sort((a, b) => {\n    //   if (a.name < b.name) {\n    //     return -1;\n    //   }\n    //   if (a.name > b.name) {\n    //     return 1;\n    //   }\n    //   return 0;\n    // });\n    this.documentListChanged.next(this.documents.slice());\n    console.log(\"json result = \", this.documents.slice());\n    // return this.documents.slice();\n  }\n\n  getDocument(id) {\n    for (const document of this.documents) {\n      if (document.id == id) {\n        //console.log(\"found!\")\n        return document;\n      }\n    }\n    return null;\n  }\n  addDocument(document) {\n    if (!document) {\n      return;\n    }\n    // make sure id of the new Document is empty\n    document.id = '';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // add to database\n    this.httpClient.post('http://localhost:3000/documents', document, {\n      headers: headers\n    }).subscribe(responseData => {\n      // add new document to documents\n      this.documents.push(responseData.document);\n      this.sortAndSend();\n    });\n  }\n  // addDocument(newDocument: Document) {\n  //   if (newDocument == undefined || newDocument == null) {\n  //     return;\n  //   }\n  //   this.maxDocumentId++;\n  //   newDocument.id = String(this.maxDocumentId);\n  //   this.documents.push(newDocument)\n  //   this.storeDocuments();\n  // }\n  // updateDocument(originalDocument: Document, newDocument: Document) {\n  //   if (originalDocument == null || originalDocument == null || originalDocument == undefined || originalDocument == undefined) {\n  //     return;\n  //   }\n  //   const pos = this.documents.indexOf(originalDocument);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   newDocument.id = originalDocument.id;\n  //   this.documents[pos] = newDocument;\n  //   this.storeDocuments();\n  // }\n  updateDocument(originalDocument, newDocument) {\n    if (!originalDocument || !newDocument) {\n      return;\n    }\n    const pos = this.documents.findIndex(d => d.id === originalDocument.id);\n    if (pos < 0) {\n      return;\n    }\n    // set the id of the new Document to the id of the old Document\n    newDocument.id = originalDocument.id;\n    // newDocument._id = originalDocument._id;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // update database\n    this.httpClient.put('http://localhost:3000/documents/' + originalDocument.id, newDocument, {\n      headers: headers\n    }).subscribe(response => {\n      this.documents[pos] = newDocument;\n      this.sortAndSend();\n    });\n  }\n  // deleteDocument(document: Document) {\n  //   if (!document) {\n  //     return;\n  //   }\n  //   const pos = this.documents.indexOf(document);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   this.documents.splice(pos, 1);\n  //   this.storeDocuments();\n  // }\n  deleteDocument(document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.documents.findIndex(d => d.id === document.id);\n    if (pos < 0) {\n      return;\n    }\n    // delete from database\n    this.httpClient.delete('http://localhost:3000/documents/' + document.id).subscribe(response => {\n      this.documents.splice(pos, 1);\n      this.sortAndSend();\n    });\n  }\n  getMaxDocumentId() {\n    //return this.documents.sort(d=>d.id)[0];\n    let maxId = 0;\n    for (const document of this.documents) {\n      if (+document.id > maxId) {\n        maxId = +document.id;\n      }\n    }\n    return maxId;\n  }\n  storeDocuments() {\n    this.httpClient.put(this.mongoURIdocuments, JSON.stringify(this.documents), {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    }).subscribe({\n      next: () => this.documentListChanged.next(this.documents.slice()),\n      error: evar => console.error('Error saving documents: ', evar)\n    });\n  }\n  sortAndSend() {\n    this.documents.sort((a, b) => {\n      if (a.name < b.name) {\n        return -1;\n      }\n      if (a.name > b.name) {\n        return 1;\n      }\n      return 0;\n    });\n    this.documentListChanged.next(this.documents.slice());\n  }\n}\nDocumentService.ɵfac = function DocumentService_Factory(t) {\n  return new (t || DocumentService)(i0.ɵɵinject(i1.HttpClient));\n};\nDocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DocumentService,\n  factory: DocumentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","EventEmitter","Subject","DocumentService","constructor","httpClient","documents","getDocuments","console","log","request","mongoURIdocuments","responseType","documentListChanged","next","slice","getDocument","id","document","addDocument","headers","post","subscribe","responseData","push","sortAndSend","updateDocument","originalDocument","newDocument","pos","findIndex","d","put","response","deleteDocument","delete","splice","getMaxDocumentId","maxId","storeDocuments","JSON","stringify","error","evar","sort","a","b","name","factory","providedIn"],"sourceRoot":"","sources":["C:\\data\\A-byu\\Full Stack Dev WDD 430\\code\\wdd430\\byui-winter\\week11\\cms\\src\\app\\documents\\document.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { EventEmitter, Injectable, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Document } from './documents.model';\nimport { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DocumentService {\n  // mongoURIdocuments: string = \"https://wdd430cms0-default-rtdb.firebaseio.com/documents.json\";\n  mongoURIdocuments: string = 'http://localhost:3000/documents';\n  // documents: Document[] = [];\n  documents: any;\n  documentSelectedEvent = new EventEmitter<Document>();\n  // documentChangedEvent = new EventEmitter<Document[]>();\n  documentListChanged = new Subject<Document[]>();\n  maxDocumentId: number;\n  jsondocs: any;\n\n  constructor(private httpClient: HttpClient) {\n    //  this.documents = MOCKDOCUMENTS;\n    // this.webdocuments = this.getDocuments();\n    this.documents = this.getDocuments();\n    console.log('mockDocs = ', this.documents);\n    // console.log(\"Web Docs Array = \", this.webdocuments);\n    // this.maxDocumentId = this.getMaxDocumentId();\n    // console.log(\"Max Doc ID =\", this.maxDocumentId);\n  }\n\n\n  getDocuments() {\n    this.documents = this.httpClient.request('GET', this.mongoURIdocuments,\n    {responseType:'json'});\n\n        // this.documents.sort((a, b) => {\n        //   if (a.name < b.name) {\n        //     return -1;\n        //   }\n        //   if (a.name > b.name) {\n        //     return 1;\n        //   }\n        //   return 0;\n        // });\n        this.documentListChanged.next(this.documents.slice());\n        console.log(\"json result = \", this.documents.slice());\n        // return this.documents.slice();\n      };\n\n  getDocument(id: string): Document {\n    for (const document of this.documents) {\n      if (document.id == id) {\n        //console.log(\"found!\")\n        return document;\n      }\n    }\n    return null;\n  }\n  addDocument(document: Document) {\n    if (!document) {\n      return;\n    }\n\n    // make sure id of the new Document is empty\n    document.id = '';\n\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    // add to database\n    this.httpClient\n      .post<{ message: string; document: Document }>(\n        'http://localhost:3000/documents',\n        document,\n        { headers: headers }\n      )\n      .subscribe((responseData) => {\n        // add new document to documents\n        this.documents.push(responseData.document);\n        this.sortAndSend();\n      });\n  }\n\n  // addDocument(newDocument: Document) {\n  //   if (newDocument == undefined || newDocument == null) {\n  //     return;\n  //   }\n\n  //   this.maxDocumentId++;\n  //   newDocument.id = String(this.maxDocumentId);\n  //   this.documents.push(newDocument)\n  //   this.storeDocuments();\n  // }\n\n  // updateDocument(originalDocument: Document, newDocument: Document) {\n  //   if (originalDocument == null || originalDocument == null || originalDocument == undefined || originalDocument == undefined) {\n  //     return;\n  //   }\n\n  //   const pos = this.documents.indexOf(originalDocument);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n\n  //   newDocument.id = originalDocument.id;\n  //   this.documents[pos] = newDocument;\n  //   this.storeDocuments();\n  // }\n\n  updateDocument(originalDocument: Document, newDocument: Document) {\n    if (!originalDocument || !newDocument) {\n      return;\n    }\n\n    const pos = this.documents.findIndex((d) => d.id === originalDocument.id);\n\n    if (pos < 0) {\n      return;\n    }\n\n    // set the id of the new Document to the id of the old Document\n    newDocument.id = originalDocument.id;\n    // newDocument._id = originalDocument._id;\n\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    // update database\n    this.httpClient\n      .put(\n        'http://localhost:3000/documents/' + originalDocument.id,\n        newDocument,\n        { headers: headers }\n      )\n      .subscribe((response: Response) => {\n        this.documents[pos] = newDocument;\n        this.sortAndSend();\n      });\n  }\n\n  // deleteDocument(document: Document) {\n  //   if (!document) {\n  //     return;\n  //   }\n  //   const pos = this.documents.indexOf(document);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   this.documents.splice(pos, 1);\n  //   this.storeDocuments();\n  // }\n\n  deleteDocument(document: Document) {\n    if (!document) {\n      return;\n    }\n\n    const pos = this.documents.findIndex((d) => d.id === document.id);\n\n    if (pos < 0) {\n      return;\n    }\n\n    // delete from database\n    this.httpClient\n      .delete('http://localhost:3000/documents/' + document.id)\n      .subscribe((response: Response) => {\n        this.documents.splice(pos, 1);\n        this.sortAndSend();\n      });\n  }\n\n  getMaxDocumentId(): number {\n    //return this.documents.sort(d=>d.id)[0];\n    let maxId = 0;\n    for (const document of this.documents) {\n      if (+document.id > maxId) {\n        maxId = +document.id;\n      }\n    }\n    return maxId;\n  }\n\n  storeDocuments() {\n    this.httpClient\n      .put(this.mongoURIdocuments, JSON.stringify(this.documents), {\n        headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n      })\n      .subscribe({\n        next: () => this.documentListChanged.next(this.documents.slice()),\n        error: (evar) => console.error('Error saving documents: ', evar),\n      });\n  }\n\n  sortAndSend() {\n    this.documents.sort((a, b) => {\n      if (a.name < b.name) {\n        return -1;\n      }\n      if (a.name > b.name) {\n        return 1;\n      }\n      return 0;\n    });\n    this.documentListChanged.next(this.documents.slice());\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}