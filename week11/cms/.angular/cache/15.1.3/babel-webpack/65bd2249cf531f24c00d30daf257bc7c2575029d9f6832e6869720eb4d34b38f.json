{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DocumentService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    // mongoURIdocsArray: string = \"https://wdd430cms0-default-rtdb.firebaseio.com/documents.json\";\n    this.mongoURIdocsArray = 'http://localhost:3000/documents';\n    this.jsondocs = [];\n    this.docsArray = [];\n    // docsArray: Document[] = MOCKDOCUMENTS;\n    this.documentSelectedEvent = new EventEmitter();\n    this.documentChangedEvent = new EventEmitter();\n    this.documentListChanged = new Subject();\n    // this.docsArray = MOCKDOCUMENTS;\n    this.docsArray = this.getDocuments();\n  }\n  // console.log('Constructor mongoDocs =', this.docsArray);\n  //  this.jsondocs = this.getDocuments();\n  // this.docsArray = this.getDocuments();\n  // console.log('mockDocs = ', this.docsArray);\n  // console.log(\"Web Docs Array = \", this.webdocsArray);\n  // this.maxDocumentId = this.getMaxDocumentId();\n  // console.log(\"Max Doc ID =\", this.maxDocumentId);\n  // getDocuments() {\n  //   this.httpClient\n  //     .get<{ message: string; docsArray: Document[] }>(this.mongoURIdocsArray)\n  //     .subscribe((docsArrayData) => {\n  //       console.log('It works!');\n  //       this.docsArray = docsArrayData.docsArray;\n  //       response.status(200).json({\n  //         message: 'Docs fetched successfully'\n  //          docsArray: docsArray });\n  //       });\n  //sortAndSend() {\n  // this.docsArray.sort((a, b) => {\n  //   if (a.name < b.name) {\n  //     return -1;\n  //   }\n  //   if (a.name > b.name) {\n  //     return 1;\n  //   }\n  //   return 0;\n  // });\n  //       this.documentListChanged.next(this.docsArray.slice());\n  //     });\n  // }\n  getDocuments() {\n    this.httpClient.get(this.mongoURIdocsArray)\n    // .get<Document[]>(this.mongoURIdocsArray)\n    .subscribe(docs => {\n      this.docsArray = docs;\n      console.log(\"getDocuuments mongoDocs =\", this.docsArray);\n      this.maxDocumentId = this.getMaxDocumentId();\n      // Alphabetical Sort\n      this.docsArray.sort((a, b) => {\n        if (a.name < b.name) {\n          return -1;\n        }\n        if (a.name > b.name) {\n          return 1;\n        }\n        return 0;\n      });\n      this.documentListChanged.next(this.docsArray.slice());\n    });\n    return this.docsArray.slice();\n  }\n  getDocument(id) {\n    for (const document of this.docsArray) {\n      if (document.id == id) {\n        //console.log(\"found!\")\n        return document;\n      }\n    }\n    return null;\n  }\n  addDocument(document) {\n    if (!document) {\n      return;\n    }\n    // make sure id of the new Document is empty\n    document.id = '';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // add to database\n    this.httpClient.post('http://localhost:3000/docsArray', document, {\n      headers: headers\n    }).subscribe(responseData => {\n      // add new document to docsArray\n      this.docsArray.push(responseData.document);\n      this.sortAndSend();\n    });\n  }\n  // addDocument(newDocument: Document) {\n  //   if (newDocument == undefined || newDocument == null) {\n  //     return;\n  //   }\n  //   this.maxDocumentId++;\n  //   newDocument.id = String(this.maxDocumentId);\n  //   this.docsArray.push(newDocument)\n  //   this.storeDocuments();\n  // }\n  // updateDocument(originalDocument: Document, newDocument: Document) {\n  //   if (originalDocument == null || originalDocument == null || originalDocument == undefined || originalDocument == undefined) {\n  //     return;\n  //   }\n  //   const pos = this.docsArray.indexOf(originalDocument);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   newDocument.id = originalDocument.id;\n  //   this.docsArray[pos] = newDocument;\n  //   this.storeDocuments();\n  // }\n  updateDocument(originalDocument, newDocument) {\n    if (!originalDocument || !newDocument) {\n      return;\n    }\n    const pos = this.docsArray.findIndex(d => d.id === originalDocument.id);\n    if (pos < 0) {\n      return;\n    }\n    // set the id of the new Document to the id of the old Document\n    newDocument.id = originalDocument.id;\n    // newDocument._id = originalDocument._id;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // update database\n    this.httpClient.put('http://localhost:3000/docsArray/' + originalDocument.id, newDocument, {\n      headers: headers\n    }).subscribe(response => {\n      this.docsArray[pos] = newDocument;\n      this.sortAndSend();\n    });\n  }\n  // deleteDocument(document: Document) {\n  //   if (!document) {\n  //     return;\n  //   }\n  //   const pos = this.docsArray.indexOf(document);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   this.docsArray.splice(pos, 1);\n  //   this.storeDocuments();\n  // }\n  deleteDocument(document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.docsArray.findIndex(d => d.id === document.id);\n    if (pos < 0) {\n      return;\n    }\n    // delete from database\n    this.httpClient.delete('http://localhost:3000/docsArray/' + document.id).subscribe(response => {\n      this.docsArray.splice(pos, 1);\n      this.sortAndSend();\n    });\n  }\n  getMaxDocumentId() {\n    //return this.docsArray.sort(d=>d.id)[0];\n    let maxId = 0;\n    for (const document of this.docsArray) {\n      if (+document.id > maxId) {\n        maxId = +document.id;\n      }\n    }\n    return maxId;\n  }\n  storeDocuments() {\n    this.httpClient.put(this.mongoURIdocsArray, JSON.stringify(this.docsArray), {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    }).subscribe({\n      next: () => this.documentListChanged.next(this.docsArray.slice()),\n      error: evar => console.error('Error saving docsArray: ', evar)\n    });\n  }\n  sortAndSend() {\n    this.docsArray.sort((a, b) => {\n      if (a.name < b.name) {\n        return -1;\n      }\n      if (a.name > b.name) {\n        return 1;\n      }\n      return 0;\n    });\n    this.documentListChanged.next(this.docsArray.slice());\n  }\n}\nDocumentService.ɵfac = function DocumentService_Factory(t) {\n  return new (t || DocumentService)(i0.ɵɵinject(i1.HttpClient));\n};\nDocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DocumentService,\n  factory: DocumentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","EventEmitter","Subject","DocumentService","constructor","httpClient","docsArray","getDocuments","get","mongoURIdocsArray","subscribe","docs","console","log","maxDocumentId","getMaxDocumentId","sort","a","b","name","documentListChanged","next","slice","getDocument","id","document","addDocument","headers","post","responseData","push","sortAndSend","updateDocument","originalDocument","newDocument","pos","findIndex","d","put","response","deleteDocument","delete","splice","maxId","storeDocuments","JSON","stringify","error","evar","factory","providedIn"],"sourceRoot":"","sources":["C:\\data\\A-byu\\Full Stack Dev WDD 430\\code\\wdd430\\byui-winter\\week11\\cms\\src\\app\\documents\\document.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { EventEmitter, Injectable, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Document } from './documents.model';\nimport { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\nimport { json } from 'body-parser';\nimport { response } from 'express';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DocumentService {\n // mongoURIdocsArray: string = \"https://wdd430cms0-default-rtdb.firebaseio.com/documents.json\";\n  mongoURIdocsArray: string = 'http://localhost:3000/documents';\n  jsondocs: Document[] = [];\n   docsArray: Document[] = [];\n  // docsArray: Document[] = MOCKDOCUMENTS;\n  documentSelectedEvent = new EventEmitter<Document>();\n  documentChangedEvent = new EventEmitter<Document[]>();\n  documentListChanged = new Subject<Document[]>();\n  maxDocumentId: number;\n\n  constructor(private httpClient: HttpClient) {\n  // this.docsArray = MOCKDOCUMENTS;\n  this.docsArray = this.getDocuments();\n}\n  // console.log('Constructor mongoDocs =', this.docsArray);\n  //  this.jsondocs = this.getDocuments();\n  // this.docsArray = this.getDocuments();\n\n\n   // console.log('mockDocs = ', this.docsArray);\n   // console.log(\"Web Docs Array = \", this.webdocsArray);\n   // this.maxDocumentId = this.getMaxDocumentId();\n   // console.log(\"Max Doc ID =\", this.maxDocumentId);\n\n  // getDocuments() {\n  //   this.httpClient\n  //     .get<{ message: string; docsArray: Document[] }>(this.mongoURIdocsArray)\n  //     .subscribe((docsArrayData) => {\n  //       console.log('It works!');\n  //       this.docsArray = docsArrayData.docsArray;\n  //       response.status(200).json({\n  //         message: 'Docs fetched successfully'\n  //          docsArray: docsArray });\n  //       });\n\n        //sortAndSend() {\n        // this.docsArray.sort((a, b) => {\n        //   if (a.name < b.name) {\n        //     return -1;\n        //   }\n        //   if (a.name > b.name) {\n        //     return 1;\n        //   }\n        //   return 0;\n        // });\n  //       this.documentListChanged.next(this.docsArray.slice());\n  //     });\n  // }\n\n  getDocuments() {\n    this.httpClient\n      .get<Document[]>(this.mongoURIdocsArray)\n      // .get<Document[]>(this.mongoURIdocsArray)\n      .subscribe((docs) => {\n       this.docsArray = docs;\n       console.log(\"getDocuuments mongoDocs =\", this.docsArray);\n        this.maxDocumentId = this.getMaxDocumentId();\n       // Alphabetical Sort\n        this.docsArray.sort((a, b) => {\n          if (a.name < b.name) {\n            return -1;\n          }\n          if (a.name > b.name) {\n            return 1;\n          }\n          return 0;\n        });\n        this.documentListChanged.next(this.docsArray.slice());\n      });\n     return this.docsArray.slice();\n  }\n\n  getDocument(id: string): Document {\n    for (const document of this.docsArray) {\n      if (document.id == id) {\n        //console.log(\"found!\")\n        return document;\n      }\n    }\n    return null;\n  }\n  addDocument(document: Document) {\n    if (!document) {\n      return;\n    }\n\n    // make sure id of the new Document is empty\n    document.id = '';\n\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    // add to database\n    this.httpClient\n      .post<{ message: string; document: Document }>(\n        'http://localhost:3000/docsArray',\n        document,\n        { headers: headers }\n      )\n      .subscribe((responseData) => {\n        // add new document to docsArray\n        this.docsArray.push(responseData.document);\n        this.sortAndSend();\n      });\n  }\n\n  // addDocument(newDocument: Document) {\n  //   if (newDocument == undefined || newDocument == null) {\n  //     return;\n  //   }\n\n  //   this.maxDocumentId++;\n  //   newDocument.id = String(this.maxDocumentId);\n  //   this.docsArray.push(newDocument)\n  //   this.storeDocuments();\n  // }\n\n  // updateDocument(originalDocument: Document, newDocument: Document) {\n  //   if (originalDocument == null || originalDocument == null || originalDocument == undefined || originalDocument == undefined) {\n  //     return;\n  //   }\n\n  //   const pos = this.docsArray.indexOf(originalDocument);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n\n  //   newDocument.id = originalDocument.id;\n  //   this.docsArray[pos] = newDocument;\n  //   this.storeDocuments();\n  // }\n\n  updateDocument(originalDocument: Document, newDocument: Document) {\n    if (!originalDocument || !newDocument) {\n      return;\n    }\n\n    const pos = this.docsArray.findIndex((d) => d.id === originalDocument.id);\n\n    if (pos < 0) {\n      return;\n    }\n\n    // set the id of the new Document to the id of the old Document\n    newDocument.id = originalDocument.id;\n    // newDocument._id = originalDocument._id;\n\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    // update database\n    this.httpClient\n      .put(\n        'http://localhost:3000/docsArray/' + originalDocument.id,\n        newDocument,\n        { headers: headers }\n      )\n      .subscribe((response: Response) => {\n        this.docsArray[pos] = newDocument;\n        this.sortAndSend();\n      });\n  }\n\n  // deleteDocument(document: Document) {\n  //   if (!document) {\n  //     return;\n  //   }\n  //   const pos = this.docsArray.indexOf(document);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   this.docsArray.splice(pos, 1);\n  //   this.storeDocuments();\n  // }\n\n  deleteDocument(document: Document) {\n    if (!document) {\n      return;\n    }\n\n    const pos = this.docsArray.findIndex((d) => d.id === document.id);\n\n    if (pos < 0) {\n      return;\n    }\n\n    // delete from database\n    this.httpClient\n      .delete('http://localhost:3000/docsArray/' + document.id)\n      .subscribe((response: Response) => {\n        this.docsArray.splice(pos, 1);\n        this.sortAndSend();\n      });\n  }\n\n  getMaxDocumentId(): number {\n    //return this.docsArray.sort(d=>d.id)[0];\n    let maxId = 0;\n    for (const document of this.docsArray) {\n      if (+document.id > maxId) {\n        maxId = +document.id;\n      }\n    }\n    return maxId;\n  }\n\n  storeDocuments() {\n    this.httpClient\n      .put(this.mongoURIdocsArray, JSON.stringify(this.docsArray), {\n        headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n      })\n      .subscribe({\n        next: () => this.documentListChanged.next(this.docsArray.slice()),\n        error: (evar) => console.error('Error saving docsArray: ', evar),\n      });\n  }\n\n  sortAndSend() {\n    this.docsArray.sort((a, b) => {\n      if (a.name < b.name) {\n        return -1;\n      }\n      if (a.name > b.name) {\n        return 1;\n      }\n      return 0;\n    });\n    this.documentListChanged.next(this.docsArray.slice());\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}