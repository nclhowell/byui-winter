{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContactService {\n  constructor(httpCient) {\n    this.httpCient = httpCient;\n    this.fbURIcontacts = \"https://wdd430cms0-default-rtdb.firebaseio.com/contacts.json\";\n    this.contacts = [];\n    this.contactSelectedEvent = new EventEmitter();\n    // contactChangedEvent = new EventEmitter<Contact[]>();\n    this.contactListChanged = new Subject();\n    //this.contacts = MOCKCONTACTS;\n    this.contacts = this.getContacts();\n    this.maxContactId = this.getMaxContactId();\n  }\n  getContacts() {\n    this.httpCient.get(this.fbURIcontacts).subscribe(docs => {\n      // console.log(docs);\n      this.contacts = docs;\n      this.maxContactId = this.getMaxContactId();\n      // Alphabetical Sort\n      this.contacts.sort((a, b) => {\n        if (a.name < b.name) {\n          return -1;\n        }\n        if (a.name > b.name) {\n          return 1;\n        }\n        return 0;\n      });\n      this.contactListChanged.next(this.contacts.slice());\n    });\n    return this.contacts.slice();\n  }\n  getContact(id) {\n    for (const contact of this.contacts) {\n      if (contact.id == id) {\n        //console.log(\"found!\")\n        return contact;\n      }\n    }\n    return null;\n  }\n  addContact(newContact) {\n    if (newContact == undefined || newContact == null) {\n      return;\n    }\n    this.maxContactId++;\n    newContact.id = String(this.maxContactId);\n    this.contacts.push(newContact);\n    //this.contactListChanged.next(this.getContacts())\n    this.storeContacts();\n  }\n  updateContact(originalContact, newContact) {\n    if (originalContact == null || originalContact == null || originalContact == undefined || originalContact == undefined) {\n      return;\n    }\n    const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n    newContact.id = originalContact.id;\n    this.contacts[pos] = newContact;\n    //this.contactListChanged.next(this.getContacts())\n    this.storeContacts();\n  }\n  deleteContact(contact) {\n    if (!contact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    this.contacts.splice(pos, 1);\n    //this.contactChangedEvent.emit(this.contacts.slice());\n    //this.contactListChanged.next(this.getContacts());\n    this.storeContacts();\n  }\n  getMaxContactId() {\n    //return this.contacts.sort(d=>d.id)[0];\n    let maxId = 0;\n    for (const contact of this.contacts) {\n      if (+contact.id > maxId) {\n        maxId = +contact.id;\n      }\n    }\n    return maxId;\n  }\n  storeContacts() {\n    this.httpCient.put(this.fbURIcontacts, JSON.stringify(this.contacts), {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      })\n    }).subscribe({\n      next: () => this.contactListChanged.next(this.contacts.slice()),\n      error: evar => console.error('Error saving contacts: ', evar)\n    });\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient));\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,YAAY,QAA4B,eAAe;AAChE,SAASC,OAAO,QAAQ,MAAM;;;AAO9B,OAAM,MAAOC,cAAc;EAQzBC,YAAoBC,SAAqB;IAArB,cAAS,GAATA,SAAS;IAP7B,kBAAa,GAAW,8DAA8D;IACtF,aAAQ,GAAc,EAAE;IACxB,yBAAoB,GAAG,IAAIJ,YAAY,EAAW;IAClD;IACA,uBAAkB,GAAG,IAAIC,OAAO,EAAa;IAI3C;IACA,IAAI,CAACI,QAAQ,GAAG,IAAI,CAACC,WAAW,EAAE;IAClC,IAAI,CAACC,YAAY,GAAG,IAAI,CAACC,eAAe,EAAE;EAC5C;EAEAF,WAAW;IAET,IAAI,CAACF,SAAS,CAACK,GAAG,CAAY,IAAI,CAACC,aAAa,CAAC,CAACC,SAAS,CAACC,IAAI,IAAG;MACjE;MACA,IAAI,CAACP,QAAQ,GAAGO,IAAI;MACpB,IAAI,CAACL,YAAY,GAAG,IAAI,CAACC,eAAe,EAAE;MAC7C;MACG,IAAI,CAACH,QAAQ,CAACQ,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;QAC1B,IAAID,CAAC,CAACE,IAAI,GAAGD,CAAC,CAACC,IAAI,EAAE;UACnB,OAAO,CAAC,CAAC;;QAEX,IAAIF,CAAC,CAACE,IAAI,GAAGD,CAAC,CAACC,IAAI,EAAE;UACnB,OAAO,CAAC;;QAEV,OAAO,CAAC;MACV,CAAC,CAAC;MACF,IAAI,CAACC,kBAAkB,CAACC,IAAI,CAAC,IAAI,CAACb,QAAQ,CAACc,KAAK,EAAE,CAAC;IACrD,CAAC,CAAC;IACF,OAAO,IAAI,CAACd,QAAQ,CAACc,KAAK,EAAE;EAC9B;EAEAC,UAAU,CAACC,EAAU;IACnB,KAAK,MAAMC,OAAO,IAAI,IAAI,CAACjB,QAAQ,EAAE;MACnC,IAAIiB,OAAO,CAACD,EAAE,IAAIA,EAAE,EAAE;QACpB;QACA,OAAOC,OAAO;;;IAGlB,OAAO,IAAI;EACb;EAEAC,UAAU,CAACC,UAAmB;IAC5B,IAAIA,UAAU,IAAIC,SAAS,IAAID,UAAU,IAAI,IAAI,EAAE;MACjD;;IAGF,IAAI,CAACjB,YAAY,EAAE;IACnBiB,UAAU,CAACH,EAAE,GAAGK,MAAM,CAAC,IAAI,CAACnB,YAAY,CAAC;IACzC,IAAI,CAACF,QAAQ,CAACsB,IAAI,CAACH,UAAU,CAAC;IAC9B;IACA,IAAI,CAACI,aAAa,EAAE;EACtB;EACAC,aAAa,CAACC,eAAwB,EAAEN,UAAmB;IACzD,IAAIM,eAAe,IAAI,IAAI,IAAIA,eAAe,IAAI,IAAI,IAAIA,eAAe,IAAIL,SAAS,IAAIK,eAAe,IAAIL,SAAS,EAAE;MACtH;;IAGF,MAAMM,GAAG,GAAG,IAAI,CAAC1B,QAAQ,CAAC2B,OAAO,CAACF,eAAe,CAAC;IAClD,IAAIC,GAAG,GAAG,CAAC,EAAE;MACX;;IAGFP,UAAU,CAACH,EAAE,GAAGS,eAAe,CAACT,EAAE;IAClC,IAAI,CAAChB,QAAQ,CAAC0B,GAAG,CAAC,GAAGP,UAAU;IAC/B;IACA,IAAI,CAACI,aAAa,EAAE;EACtB;EAEAK,aAAa,CAACX,OAAgB;IAC5B,IAAI,CAACA,OAAO,EAAE;MACZ;;IAEF,MAAMS,GAAG,GAAG,IAAI,CAAC1B,QAAQ,CAAC2B,OAAO,CAACV,OAAO,CAAC;IAC1C,IAAIS,GAAG,GAAG,CAAC,EAAE;MACX;;IAEF,IAAI,CAAC1B,QAAQ,CAAC6B,MAAM,CAACH,GAAG,EAAE,CAAC,CAAC;IAC5B;IACA;IACA,IAAI,CAACH,aAAa,EAAE;EACtB;EAEApB,eAAe;IACb;IACA,IAAI2B,KAAK,GAAG,CAAC;IACb,KAAK,MAAMb,OAAO,IAAI,IAAI,CAACjB,QAAQ,EAAE;MACnC,IAAI,CAACiB,OAAO,CAACD,EAAE,GAAGc,KAAK,EAAE;QACvBA,KAAK,GAAG,CAACb,OAAO,CAACD,EAAE;;;IAGvB,OAAOc,KAAK;EACd;EAEAP,aAAa;IACX,IAAI,CAACxB,SAAS,CAACgC,GAAG,CAAC,IAAI,CAAC1B,aAAa,EAAE2B,IAAI,CAACC,SAAS,CAAC,IAAI,CAACjC,QAAQ,CAAC,EAChE;MAAEkC,OAAO,EAAE,IAAIxC,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;IAAC,CAAE,CAAC,CACtEY,SAAS,CACR;MACEO,IAAI,EAAE,MAAM,IAAI,CAACD,kBAAkB,CAACC,IAAI,CAAC,IAAI,CAACb,QAAQ,CAACc,KAAK,EAAE,CAAC;MAC7DqB,KAAK,EAAGC,IAAI,IAAKC,OAAO,CAACF,KAAK,CAAC,yBAAyB,EAAEC,IAAI;KACjE,CACF;EACL;;AA1GWvC,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAyC,SAAdzC,cAAc;EAAA0C,YAFb;AAAM","names":["HttpHeaders","EventEmitter","Subject","ContactService","constructor","httpCient","contacts","getContacts","maxContactId","getMaxContactId","get","fbURIcontacts","subscribe","docs","sort","a","b","name","contactListChanged","next","slice","getContact","id","contact","addContact","newContact","undefined","String","push","storeContacts","updateContact","originalContact","pos","indexOf","deleteContact","splice","maxId","put","JSON","stringify","headers","error","evar","console","factory","providedIn"],"sourceRoot":"","sources":["C:\\data\\A-byu\\Full Stack Dev WDD 430\\code\\wdd430\\byui-winter\\week9\\cms\\src\\app\\contacts\\contact.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { EventEmitter, Injectable, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Contact } from './contact.model';\nimport { MOCKCONTACTS } from './MOCKCONTACTS';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n  fbURIcontacts: string = \"https://wdd430cms0-default-rtdb.firebaseio.com/contacts.json\";\n  contacts: Contact[] = [];\n  contactSelectedEvent = new EventEmitter<Contact>();\n  // contactChangedEvent = new EventEmitter<Contact[]>();\n  contactListChanged = new Subject<Contact[]>();\n  maxContactId: number;\n\n  constructor(private httpCient: HttpClient) {\n    //this.contacts = MOCKCONTACTS;\n    this.contacts = this.getContacts();\n    this.maxContactId = this.getMaxContactId();\n  }\n\n  getContacts(): Contact[] {\n\n    this.httpCient.get<Contact[]>(this.fbURIcontacts).subscribe(docs => {\n      // console.log(docs);\n      this.contacts = docs;\n      this.maxContactId = this.getMaxContactId();\n\t  // Alphabetical Sort\n      this.contacts.sort((a, b) => {\n        if (a.name < b.name) {\n          return -1;\n        }\n        if (a.name > b.name) {\n          return 1;\n        }\n        return 0;\n      });\n      this.contactListChanged.next(this.contacts.slice())\n    });\n    return this.contacts.slice();\n  }\n\n  getContact(id: string): Contact {\n    for (const contact of this.contacts) {\n      if (contact.id == id) {\n        //console.log(\"found!\")\n        return contact;\n      }\n    }\n    return null;\n  }\n\n  addContact(newContact: Contact) {\n    if (newContact == undefined || newContact == null) {\n      return;\n    }\n\n    this.maxContactId++;\n    newContact.id = String(this.maxContactId);\n    this.contacts.push(newContact)\n    //this.contactListChanged.next(this.getContacts())\n    this.storeContacts();\n  }\n  updateContact(originalContact: Contact, newContact: Contact) {\n    if (originalContact == null || originalContact == null || originalContact == undefined || originalContact == undefined) {\n      return;\n    }\n\n    const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n\n    newContact.id = originalContact.id;\n    this.contacts[pos] = newContact;\n    //this.contactListChanged.next(this.getContacts())\n    this.storeContacts();\n  }\n\n  deleteContact(contact: Contact) {\n    if (!contact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    this.contacts.splice(pos, 1);\n    //this.contactChangedEvent.emit(this.contacts.slice());\n    //this.contactListChanged.next(this.getContacts());\n    this.storeContacts();\n  }\n\n  getMaxContactId(): number {\n    //return this.contacts.sort(d=>d.id)[0];\n    let maxId = 0\n    for (const contact of this.contacts) {\n      if (+contact.id > maxId) {\n        maxId = +contact.id;\n      }\n    }\n    return maxId;\n  }\n\n  storeContacts() {\n    this.httpCient.put(this.fbURIcontacts, JSON.stringify(this.contacts)\n      , { headers: new HttpHeaders({ \"Content-Type\": \"application/json\" }) })\n      .subscribe(\n        {\n          next: () => this.contactListChanged.next(this.contacts.slice())\n          , error: (evar) => console.error('Error saving contacts: ', evar)\n        }\n      )\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}