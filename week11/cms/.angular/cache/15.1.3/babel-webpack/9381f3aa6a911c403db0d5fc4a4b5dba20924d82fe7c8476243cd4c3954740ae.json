{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MessageService {\n  constructor(httpCient) {\n    this.httpCient = httpCient;\n    this.fbURImessages = \"https://wdd430cms0-default-rtdb.firebaseio.com/messages.json\";\n    this.messages = [];\n    this.messageSelectedEvent = new EventEmitter();\n    // messageChangedEvent = new EventEmitter<Message[]>();\n    this.messageListChanged = new Subject();\n    //this.messages = MOCKMESSAGES;\n    this.messages = this.getMessages();\n    this.maxMessageId = this.getMaxMessageId();\n  }\n  getMessages() {\n    this.httpCient.get(this.fbURImessages).subscribe(docs => {\n      // console.log(docs);\n      this.messages = docs;\n      this.maxMessageId = this.getMaxMessageId();\n      // Alphabetical Sort\n      // this.messages.sort((a, b) => {\n      //   if (a.name < b.name) {\n      //     return -1;\n      //   }\n      //   if (a.name > b.name) {\n      //     return 1;\n      //   }\n      //   return 0;\n      // });\n      this.messageListChanged.next(this.messages.slice());\n    });\n    return this.messages.slice();\n  }\n  getMessage(id) {\n    for (const message of this.messages) {\n      if (message.id == id) {\n        //console.log(\"found!\")\n        return message;\n      }\n    }\n    return null;\n  }\n  addMessage(newMessage) {\n    if (newMessage == undefined || newMessage == null) {\n      return;\n    }\n    this.maxMessageId++;\n    newMessage.id = String(this.maxMessageId);\n    this.messages.push(newMessage);\n    //this.messageListChanged.next(this.getMessages())\n    this.storeMessages();\n  }\n  updateMessage(originalMessage, newMessage) {\n    if (originalMessage == null || originalMessage == null || originalMessage == undefined || originalMessage == undefined) {\n      return;\n    }\n    const pos = this.messages.indexOf(originalMessage);\n    if (pos < 0) {\n      return;\n    }\n    newMessage.id = originalMessage.id;\n    this.messages[pos] = newMessage;\n    //this.messageListChanged.next(this.getMessages())\n    this.storeMessages();\n  }\n  deleteMessage(message) {\n    if (!message) {\n      return;\n    }\n    const pos = this.messages.indexOf(message);\n    if (pos < 0) {\n      return;\n    }\n    this.messages.splice(pos, 1);\n    //this.messageChangedEvent.emit(this.messages.slice());\n    //this.messageListChanged.next(this.getMessages());\n    this.storeMessages();\n  }\n  getMaxMessageId() {\n    //return this.messages.sort(d=>d.id)[0];\n    let maxId = 0;\n    for (const message of this.messages) {\n      if (+message.id > maxId) {\n        maxId = +message.id;\n      }\n    }\n    return maxId;\n  }\n  storeMessages() {\n    this.httpCient.put(this.fbURImessages, JSON.stringify(this.messages), {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      })\n    }).subscribe({\n      next: () => this.messageListChanged.next(this.messages.slice()),\n      error: evar => console.error('Error saving messages: ', evar)\n    });\n  }\n}\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient));\n};\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","EventEmitter","Subject","MessageService","constructor","httpCient","messages","getMessages","maxMessageId","getMaxMessageId","get","fbURImessages","subscribe","docs","messageListChanged","next","slice","getMessage","id","message","addMessage","newMessage","undefined","String","push","storeMessages","updateMessage","originalMessage","pos","indexOf","deleteMessage","splice","maxId","put","JSON","stringify","headers","error","evar","console","factory","providedIn"],"sourceRoot":"","sources":["C:\\data\\A-byu\\Full Stack Dev WDD 430\\code\\wdd430\\byui-winter\\week9\\cms\\src\\app\\messages\\message.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { EventEmitter, Injectable, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Message } from './message.model';\nimport { MOCKMESSAGES } from './MOCKMESSAGES';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService {\n  fbURImessages: string = \"https://wdd430cms0-default-rtdb.firebaseio.com/messages.json\";\n  messages: Message[] = [];\n  messageSelectedEvent = new EventEmitter<Message>();\n  // messageChangedEvent = new EventEmitter<Message[]>();\n  messageListChanged = new Subject<Message[]>();\n  maxMessageId: number;\n\n  constructor(private httpCient: HttpClient) {\n    //this.messages = MOCKMESSAGES;\n    this.messages = this.getMessages();\n    this.maxMessageId = this.getMaxMessageId();\n  }\n\n  getMessages(): Message[] {\n\n    this.httpCient.get<Message[]>(this.fbURImessages).subscribe(docs => {\n      // console.log(docs);\n      this.messages = docs;\n      this.maxMessageId = this.getMaxMessageId();\n\t  // Alphabetical Sort\n      // this.messages.sort((a, b) => {\n      //   if (a.name < b.name) {\n      //     return -1;\n      //   }\n      //   if (a.name > b.name) {\n      //     return 1;\n      //   }\n      //   return 0;\n      // });\n      this.messageListChanged.next(this.messages.slice())\n    });\n    return this.messages.slice();\n  }\n\n  getMessage(id: string): Message {\n    for (const message of this.messages) {\n      if (message.id == id) {\n        //console.log(\"found!\")\n        return message;\n      }\n    }\n    return null;\n  }\n\n  addMessage(newMessage: Message) {\n    if (newMessage == undefined || newMessage == null) {\n      return;\n    }\n\n    this.maxMessageId++;\n    newMessage.id = String(this.maxMessageId);\n    this.messages.push(newMessage)\n    //this.messageListChanged.next(this.getMessages())\n    this.storeMessages();\n  }\n  updateMessage(originalMessage: Message, newMessage: Message) {\n    if (originalMessage == null || originalMessage == null || originalMessage == undefined || originalMessage == undefined) {\n      return;\n    }\n\n    const pos = this.messages.indexOf(originalMessage);\n    if (pos < 0) {\n      return;\n    }\n\n    newMessage.id = originalMessage.id;\n    this.messages[pos] = newMessage;\n    //this.messageListChanged.next(this.getMessages())\n    this.storeMessages();\n  }\n\n  deleteMessage(message: Message) {\n    if (!message) {\n      return;\n    }\n    const pos = this.messages.indexOf(message);\n    if (pos < 0) {\n      return;\n    }\n    this.messages.splice(pos, 1);\n    //this.messageChangedEvent.emit(this.messages.slice());\n    //this.messageListChanged.next(this.getMessages());\n    this.storeMessages();\n  }\n\n  getMaxMessageId(): number {\n    //return this.messages.sort(d=>d.id)[0];\n    let maxId = 0\n    for (const message of this.messages) {\n      if (+message.id > maxId) {\n        maxId = +message.id;\n      }\n    }\n    return maxId;\n  }\n\n  storeMessages() {\n    this.httpCient.put(this.fbURImessages, JSON.stringify(this.messages)\n      , { headers: new HttpHeaders({ \"Content-Type\": \"application/json\" }) })\n      .subscribe(\n        {\n          next: () => this.messageListChanged.next(this.messages.slice())\n          , error: (evar) => console.error('Error saving messages: ', evar)\n        }\n      )\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}