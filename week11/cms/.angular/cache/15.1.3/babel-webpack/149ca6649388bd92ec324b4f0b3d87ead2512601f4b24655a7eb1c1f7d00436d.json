{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\nimport * as i0 from \"@angular/core\";\nexport class DocumentService {\n  constructor() {\n    this.documents = [];\n    this.documentListClone = [];\n    this.maxid = 0;\n    this.fbURI = \"https://wdd430cms0-default-rtdb.firebaseio.com/documents.json\";\n    // Observables\n    this.DocumentListChanged = new Subject();\n    // Event Emitters\n    this.documentSelectedEvent = new EventEmitter();\n    this.documentChangedEvent = new EventEmitter();\n    this.documents = MOCKDOCUMENTS;\n    this.maxDocumentId = this.getMaxDocumentId();\n    this.documents = this.getDocuments();\n    this.maxDocumentId = this.getMaxDocumentId();\n  }\n  getDocuments() {\n    this.httpClient.get(this.fbURI).subscribe(docs => {\n      //console.log(docs);\n      this.documents = docs;\n      this.maxDocumentId = this.getMaxDocumentId();\n      // sorting alphabeticall\n      this.documents.sort((a, b) => {\n        if (a.name < b.name) {\n          return -1;\n        }\n        if (a.name > b.name) {\n          return 1;\n        }\n        return 0;\n      });\n      this.DocumentListChanged.next(this.documents.slice());\n    });\n    return this.documents.slice();\n  }\n  getMaxDocumentId() {\n    let maxId = 0;\n    let currentId = 0;\n    for (let document of this.documents) {\n      currentId = parseInt(document.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    //console.log(maxId);\n    return maxId;\n  }\n  addDocument(newdocument) {\n    if (!newdocument) {\n      return;\n    }\n    this.maxDocumentId++;\n    newdocument.id = this.maxDocumentId.toString();\n    this.documents.push(newdocument);\n    this.documentListClone = this.documents.slice();\n    this.DocumentListChanged.next(this.documentListClone);\n  }\n  updateDocument(document, newDocument) {\n    console.log(\"Edit Mode True: Original Document\", document);\n    if (!document || !newDocument) {\n      return;\n    }\n    const pos = this.documents.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    newDocument.id = document.id;\n    console.log(\"Edit Mode True: New Document derived from form\", newDocument);\n    document[pos] = newDocument;\n    console.log(\"Edit Mode True: New Document Position\", document[pos]);\n    if (pos < 0) {\n      return;\n    }\n    this.documents.splice(pos, 1);\n    this.documents.push(newDocument);\n    this.documentListClone = this.documents.slice();\n    console.log(this.documents.slice());\n    this.DocumentListChanged.next(this.documentListClone);\n  }\n  getDocument(id) {\n    for (let document of this.documents) {\n      if (document.id === id) {\n        // console.log(document);\n        return document;\n      }\n    }\n  }\n  deleteDocument(document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.documents.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    this.documents.splice(pos, 1);\n    this.documentListClone = this.documents.slice();\n    this.DocumentListChanged.next(this.documentListClone);\n  }\n}\nDocumentService.ɵfac = function DocumentService_Factory(t) {\n  return new (t || DocumentService)();\n};\nDocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DocumentService,\n  factory: DocumentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","Subject","MOCKDOCUMENTS","DocumentService","constructor","documents","maxDocumentId","getMaxDocumentId","getDocuments","httpClient","get","fbURI","subscribe","docs","sort","a","b","name","DocumentListChanged","next","slice","maxId","currentId","document","parseInt","id","addDocument","newdocument","toString","push","documentListClone","updateDocument","newDocument","console","log","pos","indexOf","splice","getDocument","deleteDocument","factory","providedIn"],"sourceRoot":"","sources":["C:\\data\\A-byu\\Full Stack Dev WDD 430\\code\\wdd430\\byui-winter\\week9\\cms\\src\\app\\documents\\document.service.ts"],"sourcesContent":["import { Injectable, EventEmitter, } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport { Document } from './documents.model';\nimport { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DocumentService {\n  documents: Document[] = [];\n  documentListClone: Document[] = [];\n  maxid = 0;\n  maxDocumentId: number;\n  fbURI: string = \"https://wdd430cms0-default-rtdb.firebaseio.com/documents.json\";\n  httpClient: HttpClient;\n\n  // Observables\n  DocumentListChanged = new Subject<Document[]>();\n\n  // Event Emitters\n  documentSelectedEvent = new EventEmitter<Document>();\n  documentChangedEvent = new EventEmitter<Document>();\n\n  constructor() {\n    this.documents = MOCKDOCUMENTS;\n    this.maxDocumentId = this.getMaxDocumentId();\n    this.documents = this.getDocuments();\n    this.maxDocumentId = this.getMaxDocumentId();\n  }\n\n  getDocuments() {\n     this.httpClient.get<Document[]>(this.fbURI).subscribe(docs => {\n      //console.log(docs);\n      this.documents = docs;\n      this.maxDocumentId = this.getMaxDocumentId();\n\t  // sorting alphabeticall\n      this.documents.sort((a, b) => {\n        if (a.name < b.name) {\n          return -1;\n        }\n        if (a.name > b.name) {\n          return 1;\n        }\n        return 0;\n      });\n      this.DocumentListChanged.next(this.documents.slice())\n    });\n\n\n    return this.documents.slice();\n  }\n\n\n  getMaxDocumentId() {\n    let maxId = 0;\n    let currentId = 0;\n    for (let document of this.documents) {\n      currentId = parseInt(document.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    //console.log(maxId);\n    return maxId;\n  }\n\n  addDocument(newdocument: Document) {\n    if (!newdocument) {\n      return;\n    }\n    this.maxDocumentId++;\n    newdocument.id = this.maxDocumentId.toString();\n    this.documents.push(newdocument);\n    this.documentListClone = this.documents.slice();\n    this.DocumentListChanged.next(this.documentListClone);\n  }\n\n  updateDocument(document: Document, newDocument: Document) {\n    console.log(\"Edit Mode True: Original Document\", document);\n\n    if (!document || !newDocument) {\n      return;\n    }\n    const pos = this.documents.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    newDocument.id = document.id;\n    console.log(\"Edit Mode True: New Document derived from form\", newDocument);\n    document[pos] = newDocument;\n    console.log(\"Edit Mode True: New Document Position\", document[pos]);\n    if (pos < 0) {\n      return;\n    }\n    this.documents.splice(pos, 1);\n    this.documents.push(newDocument);\n\n    this.documentListClone = this.documents.slice();\n    console.log (this.documents.slice())\n    this.DocumentListChanged.next(this.documentListClone);\n  }\n\n  getDocument(id: string): Document {\n    for (let document of this.documents) {\n      if (document.id === id) {\n       // console.log(document);\n        return document;\n      }\n    }\n  }\n  deleteDocument(document: Document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.documents.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    this.documents.splice(pos, 1);\n    this.documentListClone = this.documents.slice();\n    this.DocumentListChanged.next(this.documentListClone);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}