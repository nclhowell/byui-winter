{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { MOCKCONTACTS } from './MOCKCONTACTS';\nimport * as i0 from \"@angular/core\";\nexport class ContactService {\n  constructor() {\n    this.contacts = [];\n    this.contactSelectedEvent = new EventEmitter();\n    this.contactChangedEvent = new EventEmitter();\n    this.contactsChangedEvent = new EventEmitter();\n    this.contacts = MOCKCONTACTS;\n  }\n  getContacts() {\n    return this.contacts.slice();\n  }\n  deleteContact(contact) {\n    if (!contact) {\n      return;\n    }\n    const pos = this.contact.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    this.contact.splice(pos, 1);\n    this.contactChangedEvent.emit(contact);\n  }\n  getContact(id) {\n    for (let contact of this.contacts) {\n      if (contact.id === id) {\n        // console.log(contact);\n        return contact;\n      }\n    }\n  }\n  addContact(contact) {\n    // console.log (this.contacts);\n    this.contacts.push(contact);\n    // this.contactChangedEvent.emit(this.contacts.slice());\n    // this.contactChangedEvent.emit;\n    //console.log (this.contacts.slice());\n    this.contactsChangedEvent.emit(this.contacts.slice());\n    // console.log (this.contacts.slice());\n  }\n\n  addContacts(contacts) {\n    // for (let contact of contacts) {\n    //   this.addContact(contact);\n    // }\n    // this.contacts.push(contacts);\n    // this.contactsChangedEvent.emit(this.contacts.slice());\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)();\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,YAAY,QAAQ,eAAe;AAExD,SAASC,YAAY,QAAQ,gBAAgB;;AAK7C,OAAM,MAAOC,cAAc;EAMzBC;IALA,aAAQ,GAAc,EAAE;IACxB,yBAAoB,GAAG,IAAIH,YAAY,EAAW;IAClD,wBAAmB,GAAG,IAAIA,YAAY,EAAU;IAChD,yBAAoB,GAAG,IAAIA,YAAY,EAAa;IAGlD,IAAI,CAACI,QAAQ,GAAGH,YAAY;EAC9B;EACAI,WAAW;IACT,OAAO,IAAI,CAACD,QAAQ,CAACE,KAAK,EAAE;EAC9B;EAEAC,aAAa,CAACC,OAAgB;IAC5B,IAAI,CAACA,OAAO,EAAE;MACX;;IAEH,MAAMC,GAAG,GAAG,IAAI,CAACD,OAAO,CAACE,OAAO,CAACF,OAAO,CAAC;IACzC,IAAIC,GAAG,GAAG,CAAC,EAAE;MACV;;IAEH,IAAI,CAACD,OAAO,CAACG,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC;IAC3B,IAAI,CAACG,mBAAmB,CAACC,IAAI,CAACL,OAAO,CAAC;EACzC;EACEM,UAAU,CAACC,EAAU;IACpB,KAAK,IAAIP,OAAO,IAAI,IAAI,CAACJ,QAAQ,EAAE;MACjC,IAAII,OAAO,CAACO,EAAE,KAAKA,EAAE,EAAE;QACtB;QACE,OAAOP,OAAO;;;EAGpB;EACAQ,UAAU,CAACR,OAAgB;IAC1B;IACA,IAAI,CAACJ,QAAQ,CAACa,IAAI,CAACT,OAAO,CAAC;IAC5B;IACA;IACE;IACA,IAAI,CAACU,oBAAoB,CAACL,IAAI,CAAC,IAAI,CAACT,QAAQ,CAACE,KAAK,EAAE,CAAC;IACrD;EACH;;EACEa,WAAW,CAACf,QAAiB;IAC7B;IACA;IACA;IACA;IACA;EAAA;;AA9CSF,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAkB,SAAdlB,cAAc;EAAAmB,YAFX;AAAM","names":["EventEmitter","MOCKCONTACTS","ContactService","constructor","contacts","getContacts","slice","deleteContact","contact","pos","indexOf","splice","contactChangedEvent","emit","getContact","id","addContact","push","contactsChangedEvent","addContacts","factory","providedIn"],"sourceRoot":"","sources":["C:\\data\\A-byu\\Full Stack Dev WDD 430\\code\\wdd430\\byui-winter\\week6\\cms\\src\\app\\contacts\\contact.service.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { Contact } from './contact.model';\nimport { MOCKCONTACTS } from './MOCKCONTACTS';\n\n @Injectable({\n    providedIn: 'root'\n})\nexport class ContactService {\n  contacts: Contact[] = [];\n  contactSelectedEvent = new EventEmitter<Contact>();\n  contactChangedEvent = new EventEmitter<string>();\n  contactsChangedEvent = new EventEmitter<Contact[]>();\n\n  constructor() {\n    this.contacts = MOCKCONTACTS;\n  }\n  getContacts() {\n    return this.contacts.slice();\n  }\n\n  deleteContact(contact: Contact) {\n    if (!contact) {\n       return;\n    }\n    const pos = this.contact.indexOf(contact);\n    if (pos < 0) {\n       return;\n    }\n    this.contact.splice(pos, 1);\n    this.contactChangedEvent.emit(contact);\n };\n   getContact(id: string): Contact {\n    for (let contact of this.contacts) {\n      if (contact.id === id) {\n       // console.log(contact);\n         return contact;\n       }\n     }\n   }\n   addContact(contact: Contact){\n    // console.log (this.contacts);\n    this.contacts.push(contact);\n   // this.contactChangedEvent.emit(this.contacts.slice());\n   // this.contactChangedEvent.emit;\n     //console.log (this.contacts.slice());\n     this.contactsChangedEvent.emit(this.contacts.slice())\n     // console.log (this.contacts.slice());\n  }\n    addContacts(contacts: Contact) {\n    // for (let contact of contacts) {\n    //   this.addContact(contact);\n    // }\n    // this.contacts.push(contacts);\n    // this.contactsChangedEvent.emit(this.contacts.slice());\n\n}\n\n\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}