{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { MOCKCONTACTS } from './MOCKCONTACTS';\nimport * as i0 from \"@angular/core\";\nexport class ContactService {\n  constructor() {\n    this.contacts = [];\n    this.contactListClone = [];\n    this.maxid = 0;\n    // Observables\n    this.ContactListChanged = new Subject();\n    // Event Emitters\n    this.contactSelectedEvent = new EventEmitter();\n    this.contactsChangedEvent = new EventEmitter();\n    this.contactChangedEvent = new EventEmitter();\n    this.contacts = MOCKCONTACTS;\n    this.maxContactId = this.getMaxContactId();\n  }\n  getContacts() {\n    return this.contacts.slice();\n  }\n  getMaxContactId() {\n    let maxId = 0;\n    let currentId = 0;\n    for (let contact of this.contacts) {\n      currentId = parseInt(contact.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    console.log(maxId);\n    return maxId;\n  }\n  addContact(newcontact) {\n    if (!newcontact) {\n      return;\n    }\n    this.maxContactId++;\n    newcontact.id = this.maxContactId.toString();\n    this.contacts.push(newcontact);\n    this.contactListClone = this.contacts.slice();\n    this.ContactListChanged.next(this.contactListClone);\n  }\n  updateContact(contact, newContact) {\n    if (!contact || !newContact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    newContact.id = contact.id;\n    contact[pos] = newContact;\n    this.contactListClone = this.contacts.slice();\n    this.ContactListChanged.next(this.contactListClone);\n  }\n  getContact(id) {\n    for (let contact of this.contacts) {\n      if (contact.id === id) {\n        console.log(contact);\n        return contact;\n      }\n    }\n  }\n  deleteContact(contact) {\n    if (!contact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    this.contacts.splice(pos, 1);\n    this.contactListClone = this.contacts.slice();\n    this.ContactListChanged.next(this.contactListClone);\n  }\n  //   deleteContact(contact: Contact) {\n  //     if (!contact) {\n  //        return;\n  //     }\n  //     const pos = this.contacts.indexOf(contact);\n  //     if (pos < 0) {\n  //        return;\n  //     }\n  //     this.contacts.splice(pos, 1);\n  //    // this.contactChangedEvent.emit(contact);\n  //     this.ContactListChanged.next(this.contacts.slice());\n  //  };\n  //  getContact(id: string): Contact {\n  //   for (let contact of this.contacts) {\n  //     if (contact.id === id) {\n  //      // console.log(contact);\n  //        return contact;\n  //      }\n  //    }\n  //  }\n  addContacts(contacts) {\n    // for (let contact of contacts) {\n    //   this.addContact(contact);\n    // }\n    // this.contacts.push(contacts);\n    // this.contactsChangedEvent.emit(this.contacts.slice());\n    this.ContactListChanged.next(this.contacts.slice());\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)();\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","Subject","MOCKCONTACTS","ContactService","constructor","contacts","maxContactId","getMaxContactId","getContacts","slice","maxId","currentId","contact","parseInt","id","console","log","addContact","newcontact","toString","push","contactListClone","ContactListChanged","next","updateContact","newContact","pos","indexOf","getContact","deleteContact","splice","addContacts","factory","providedIn"],"sourceRoot":"","sources":["C:\\data\\A-byu\\Full Stack Dev WDD 430\\code\\wdd430\\byui-winter\\week8\\cms\\src\\app\\contacts\\contact.service.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Contact } from './contact.model';\nimport { MOCKCONTACTS } from './MOCKCONTACTS';\n\n @Injectable({\n    providedIn: 'root'\n})\nexport class ContactService {\n contacts: Contact[] = [];\n contactListClone: Contact[] = [];\n maxid = 0;\n maxContactId: number\n // Observables\n ContactListChanged = new Subject<Contact[]>();\n // Event Emitters\n  contactSelectedEvent = new EventEmitter<Contact>();\n  contactsChangedEvent = new EventEmitter<Contact[]>();\n  contactChangedEvent = new EventEmitter<Contact>();\n\n  constructor() {\n    this.contacts = MOCKCONTACTS;\n    this.maxContactId = this.getMaxContactId()\n  }\n  getContacts() {\n    return this.contacts.slice();\n  }\n\n  getMaxContactId() {\n    let maxId = 0;\n    let currentId = 0;\n    for (let contact of this.contacts) {\n      currentId = parseInt(contact.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    console.log(maxId);\n    return maxId;\n  }\n\n  addContact(newcontact: Contact) {\n    if (!newcontact) {\n      return;\n    }\n    this.maxContactId++;\n    newcontact.id = this.maxContactId.toString();\n    this.contacts.push(newcontact);\n    this.contactListClone = this.contacts.slice();\n    this.ContactListChanged.next(this.contactListClone);\n  }\n\n  updateContact(contact: Contact, newContact: Contact) {\n    if (!contact || !newContact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    newContact.id = contact.id;\n    contact[pos] = newContact;\n    this.contactListClone = this.contacts.slice();\n    this.ContactListChanged.next(this.contactListClone);\n  }\n\n  getContact(id: string): Contact {\n    for (let contact of this.contacts) {\n      if (contact.id === id) {\n        console.log(contact);\n        return contact;\n      }\n    }\n  }\n  deleteContact(contact: Contact) {\n    if (!contact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    this.contacts.splice(pos, 1);\n    this.contactListClone = this.contacts.slice();\n    this.ContactListChanged.next(this.contactListClone);\n  }\n\n//   deleteContact(contact: Contact) {\n//     if (!contact) {\n//        return;\n//     }\n//     const pos = this.contacts.indexOf(contact);\n//     if (pos < 0) {\n//        return;\n//     }\n//     this.contacts.splice(pos, 1);\n//    // this.contactChangedEvent.emit(contact);\n//     this.ContactListChanged.next(this.contacts.slice());\n//  };\n\n\n  //  getContact(id: string): Contact {\n  //   for (let contact of this.contacts) {\n  //     if (contact.id === id) {\n  //      // console.log(contact);\n  //        return contact;\n  //      }\n  //    }\n  //  }\n\n    addContacts(contacts: Contact) {\n    // for (let contact of contacts) {\n    //   this.addContact(contact);\n    // }\n    // this.contacts.push(contacts);\n    // this.contactsChangedEvent.emit(this.contacts.slice());\n    this.ContactListChanged.next(this.contacts.slice());\n\n}\n\n}\n  //  addContact(contact: Contact){\n  //   // console.log (this.contacts);\n  //   this.contacts.push(contact);\n  //   this.ContactListChanged.next(this.contacts.slice());\n  // }\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}