{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet DocumentEditComponent = class DocumentEditComponent {\n  constructor(documentService, router, route) {\n    this.documentService = documentService;\n    this.router = router;\n    this.route = route;\n    this.editMode = false;\n    this.name = \"\";\n    this.tsdocTitle = {\n      \"docTitle\": \"\"\n    };\n    this.tsdocDesc = {\n      \"docDesc\": \"Whatever Description\"\n    };\n    this.tsdocUrl = {\n      \"docUrl\": \"\"\n    };\n    this.tsWhat = true;\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      console.log(params['id']);\n      if (!params['id']) {\n        this.editMode = false;\n        return;\n      }\n      this.id = params['id'];\n      this.originalDocument = this.documentService.getDocument(this.id);\n      if (!this.originalDocument) {\n        return;\n      }\n      this.document = this.originalDocument;\n      this.document = JSON.parse(JSON.stringify(this.document));\n      this.editMode = true;\n      console.log(\"Cloned Doc = \", this.document);\n    });\n  }\n  onSubmit(f) {\n    this.value = f.value; // get values from form’s fields\n    this.newDocument = this.document;\n    if (this.editMode = true) {\n      this.documentService.updateDocument(this.originalDocument, this.newDocument);\n    } else {\n      this.documentService.addDocument(this.newDocument);\n    }\n    this.router.navigate(['documents']);\n    // console.log(f)\n    // console.log(this.tsdocTitle)\n    //console.log(\"Title Value is:\", f.value.docTitle)\n    //console.log(\"Description Value is:\", f.value.docDesc)\n    // console.log(\"Url Value is:\", f.value.docUrl)\n    // console.log(\"Url Value is:\", f.value.docUrl)\n  }\n\n  onCancel() {\n    this.router.navigate(['documents']);\n  }\n};\nDocumentEditComponent = __decorate([Component({\n  selector: 'app-document-edit',\n  templateUrl: './document-edit.component.html',\n  styleUrls: ['./document-edit.component.css']\n})], DocumentEditComponent);\nexport { DocumentEditComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAiB,eAAe;AAU3C,IAAMC,qBAAqB,GAA3B,MAAMA,qBAAqB;EAclCC,YACUC,eAAgC,EAChCC,MAAc,EACdC,KAAqB;IAFrB,oBAAe,GAAfF,eAAe;IACf,WAAM,GAANC,MAAM;IACN,UAAK,GAALC,KAAK;IAZf,aAAQ,GAAY,KAAK;IACzB,SAAI,GAAW,EAAE;IACjB,eAAU,GAAG;MAAC,UAAU,EAAE;IAAE,CAAC;IAC7B,cAAS,GAAG;MAAC,SAAS,EAAE;IAAsB,CAAC;IAC/C,aAAQ,GAAG;MAAC,QAAQ,EAAE;IAAE,CAAC;IACzB,WAAM,GAAG,IAAI;EAQb;EAEAC,QAAQ;IACN,IAAI,CAACD,KAAK,CAACE,MAAM,CAACC,SAAS,CACxBD,MAAc,IAAI;MACjBE,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC,IAAI,CAAC,CAAC;MACzB,IAAI,CAACA,MAAM,CAAC,IAAI,CAAC,EACjB;QACA,IAAI,CAACI,QAAQ,GAAG,KAAK;QACrB;;MAEN,IAAI,CAACC,EAAE,GAAGL,MAAM,CAAC,IAAI,CAAC;MACtB,IAAI,CAACM,gBAAgB,GAAG,IAAI,CAACV,eAAe,CAACW,WAAW,CAAC,IAAI,CAACF,EAAE,CAAC;MACjE,IAAI,CAAC,IAAI,CAACC,gBAAgB,EAC1B;QAAC;;MACD,IAAI,CAACE,QAAQ,GAAG,IAAI,CAACF,gBAAgB;MACrC,IAAI,CAACE,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC,IAAI,CAACH,QAAQ,CAAC,CAAC;MACzD,IAAI,CAACJ,QAAQ,GAAG,IAAI;MACpBF,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,IAAI,CAACK,QAAQ,CAAC;IAC3C,CAAC,CAAC;EACF;EAEAI,QAAQ,CAACC,CAAS;IAChB,IAAI,CAACC,KAAK,GAAGD,CAAC,CAACC,KAAK,CAAC,CAAE;IACvB,IAAI,CAACC,WAAW,GAAG,IAAI,CAACP,QAAQ;IAC/B,IAAI,IAAI,CAACJ,QAAQ,GAAG,IAAI,EAAE;MACzB,IAAI,CAACR,eAAe,CAACoB,cAAc,CAAC,IAAI,CAACV,gBAAgB,EAAE,IAAI,CAACS,WAAW,CAAC;KAC5E,MAED;MACC,IAAI,CAACnB,eAAe,CAACqB,WAAW,CAAC,IAAI,CAACF,WAAW,CAAC;;IAGpD,IAAI,CAAClB,MAAM,CAACqB,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;IACrC;IACA;IACA;IACA;IACA;IACA;EACE;;EAEFC,QAAQ;IACN,IAAI,CAACtB,MAAM,CAACqB,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;EAClC;CAEF;AAhEYxB,qBAAqB,eALjCD,SAAS,CAAC;EACT2B,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,gCAAgC;EAC7CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,GACW5B,qBAAqB,CAgEjC;SAhEYA,qBAAqB","names":["Component","DocumentEditComponent","constructor","documentService","router","route","ngOnInit","params","subscribe","console","log","editMode","id","originalDocument","getDocument","document","JSON","parse","stringify","onSubmit","f","value","newDocument","updateDocument","addDocument","navigate","onCancel","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\data\\A-byu\\Full Stack Dev WDD 430\\code\\wdd430\\byui-winter\\week8\\cms\\src\\app\\documents\\document-edit\\document-edit.component.ts"],"sourcesContent":["import { Component,  OnInit } from '@angular/core';\nimport { FormGroup, FormControl, FormArray, Validators, NgForm } from '@angular/forms';\nimport { DocumentService } from '../document.service';\nimport { Document } from '../documents.model'\nimport { ActivatedRoute, Router, Params } from '@angular/router'\n@Component({\n  selector: 'app-document-edit',\n  templateUrl: './document-edit.component.html',\n  styleUrls: ['./document-edit.component.css']\n})\nexport class DocumentEditComponent implements OnInit {\noriginalDocument: Document;\ndocument: Document;\nnewDocument: Document;\nvalue: Document;\neditMode: boolean = false;\nname: string = \"\";\ntsdocTitle = {\"docTitle\": \"\"}\ntsdocDesc = {\"docDesc\": \"Whatever Description\"}\ntsdocUrl = {\"docUrl\": \"\"}\ntsWhat = true;\nid: string;\nstrid: string;\n\nconstructor(\n  private documentService: DocumentService,\n  private router: Router,\n  private route: ActivatedRoute) {\n}\n\nngOnInit() {\n  this.route.params.subscribe(\n    (params: Params) => {\n      console.log(params['id'])\n      if (!params['id'])\n      {\n      this.editMode = false;\n      return;\n      }\nthis.id = params['id'];\nthis.originalDocument = this.documentService.getDocument(this.id)\nif (!this.originalDocument)\n{return}\nthis.document = this.originalDocument;\nthis.document = JSON.parse(JSON.stringify(this.document));\nthis.editMode = true;\nconsole.log(\"Cloned Doc = \", this.document)\n})\n}\n\nonSubmit(f: NgForm) {\n  this.value = f.value;  // get values from form’s fields\n  this.newDocument = this.document\n   if (this.editMode = true) {\n    this.documentService.updateDocument(this.originalDocument, this.newDocument)\n   }\n   else\n   {\n    this.documentService.addDocument(this.newDocument)\n   }\n\n  this.router.navigate(['documents'])\n// console.log(f)\n// console.log(this.tsdocTitle)\n//console.log(\"Title Value is:\", f.value.docTitle)\n//console.log(\"Description Value is:\", f.value.docDesc)\n// console.log(\"Url Value is:\", f.value.docUrl)\n// console.log(\"Url Value is:\", f.value.docUrl)\n  }\n\nonCancel() {\n  this.router.navigate(['documents'])\n   }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}