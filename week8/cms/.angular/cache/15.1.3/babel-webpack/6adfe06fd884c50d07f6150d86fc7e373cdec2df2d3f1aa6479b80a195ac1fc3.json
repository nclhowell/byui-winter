{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\nimport * as i0 from \"@angular/core\";\nexport class DocumentService {\n  constructor() {\n    this.document = [];\n    this.documentListClone = [];\n    this.maxid = 0;\n    // Observables\n    this.DocumentListChanged = new Subject();\n    // Event Emitters\n    this.documentSelectedEvent = new EventEmitter();\n    this.documentChangedEvent = new EventEmitter();\n    this.document = MOCKDOCUMENTS;\n    this.maxDocumentId = this.getMaxDocumentId();\n  }\n  getDocuments() {\n    return this.document.slice();\n  }\n  deleteDocument(document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.document.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    this.document.splice(pos, 1);\n    this.documentListClone = this.document.slice();\n    this.DocumentListChanged.next(this.documentListClone);\n  }\n  getMaxDocumentId() {\n    let maxId = 0;\n    let currentId = 0;\n    for (let document of this.document) {\n      currentId = parseInt(document.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    console.log(maxId);\n    return maxId;\n  }\n  addDocument(newdocument) {\n    if (!newdocument) {\n      return;\n    }\n    this.maxDocumentId++;\n    newdocument.id = this.maxDocumentId.toString();\n    this.document.push(newdocument);\n    this.documentListClone = this.document.slice();\n    this.DocumentListChanged.next(this.documentListClone);\n  }\n  updateDocument(document, newDocument) {\n    if (!document || !newDocument) {\n      return;\n    }\n    const pos = this.document.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    newDocument.id = document.id;\n    document[pos] = newDocument;\n    this.documentListClone = this.document.slice();\n    this.DocumentListChanged.next(this.documentListClone);\n  }\n  getDocument(id) {\n    for (let document of this.document) {\n      if (document.id === id) {\n        console.log(document);\n        return document;\n      }\n    }\n  }\n}\nDocumentService.ɵfac = function DocumentService_Factory(t) {\n  return new (t || DocumentService)();\n};\nDocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DocumentService,\n  factory: DocumentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","Subject","MOCKDOCUMENTS","DocumentService","constructor","document","maxDocumentId","getMaxDocumentId","getDocuments","slice","deleteDocument","pos","indexOf","splice","documentListClone","DocumentListChanged","next","maxId","currentId","parseInt","id","console","log","addDocument","newdocument","toString","push","updateDocument","newDocument","getDocument","factory","providedIn"],"sourceRoot":"","sources":["C:\\data\\A-byu\\Full Stack Dev WDD 430\\code\\wdd430\\byui-winter\\week7\\cms\\src\\app\\documents\\document.service.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Document } from './documents.model';\nimport { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DocumentService {\n  document: Document[] = [];\n  documentListClone: Document[] = [];\n  maxid = 0;\n  maxDocumentId: number;\n\n  // Observables\n  DocumentListChanged = new Subject<Document[]>();\n\n  // Event Emitters\n  documentSelectedEvent = new EventEmitter<Document>();\n  documentChangedEvent = new EventEmitter<Document>();\n\n  constructor() {\n    this.document = MOCKDOCUMENTS;\n    this.maxDocumentId = this.getMaxDocumentId();\n  }\n\n  getDocuments() {\n    return this.document.slice();\n  }\n\n  deleteDocument(document: Document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.document.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    this.document.splice(pos, 1);\n    this.documentListClone = this.document.slice();\n    this.DocumentListChanged.next(this.documentListClone);\n  }\n\n  getMaxDocumentId() {\n    let maxId = 0;\n    let currentId = 0;\n    for (let document of this.document) {\n      currentId = parseInt(document.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    console.log(maxId);\n    return maxId;\n  }\n\n  addDocument(newdocument: Document) {\n    if (!newdocument) {\n      return;\n    }\n    this.maxDocumentId++;\n    newdocument.id = this.maxDocumentId.toString();\n    this.document.push(newdocument);\n    this.documentListClone = this.document.slice();\n    this.DocumentListChanged.next(this.documentListClone);\n  }\n\n  updateDocument(document: Document, newDocument: Document) {\n    if (!document || !newDocument) {\n      return;\n    }\n    const pos = this.document.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    newDocument.id = document.id;\n    document[pos] = newDocument;\n    this.documentListClone = this.document.slice();\n    this.DocumentListChanged.next(this.documentListClone);\n  }\n\n  getDocument(id: string): Document {\n    for (let document of this.document) {\n      if (document.id === id) {\n        console.log(document);\n        return document;\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}