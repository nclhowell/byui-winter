{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DocumentService {\n  constructor(httpCient) {\n    this.httpCient = httpCient;\n    this.fbURIdocuments = \"https://wdd430cms0-default-rtdb.firebaseio.com/documents.json\";\n    this.documents = [];\n    this.documentSelectedEvent = new EventEmitter();\n    // documentChangedEvent = new EventEmitter<Document[]>();\n    this.documentListChanged = new Subject();\n    //this.documents = MOCKDOCUMENTS;\n    this.documents = this.getDocuments();\n    this.maxDocumentId = this.getMaxDocumentId();\n  }\n  getDocuments() {\n    this.httpCient.get(this.fbURIdocuments).subscribe(docs => {\n      // console.log(docs);\n      this.documents = docs;\n      this.maxDocumentId = this.getMaxDocumentId();\n      // Alphabetical Sort\n      this.documents.sort((a, b) => {\n        if (a.name < b.name) {\n          return -1;\n        }\n        if (a.name > b.name) {\n          return 1;\n        }\n        return 0;\n      });\n      this.documentListChanged.next(this.documents.slice());\n    });\n    return this.documents.slice();\n  }\n  getDocument(id) {\n    for (const document of this.documents) {\n      if (document.id == id) {\n        //console.log(\"found!\")\n        return document;\n      }\n    }\n    return null;\n  }\n  addDocument(newDocument) {\n    if (newDocument == undefined || newDocument == null) {\n      return;\n    }\n    this.maxDocumentId++;\n    newDocument.id = String(this.maxDocumentId);\n    this.documents.push(newDocument);\n    //this.documentListChanged.next(this.getDocuments())\n    this.storeDocuments();\n  }\n  updateDocument(originalDocument, newDocument) {\n    if (originalDocument == null || originalDocument == null || originalDocument == undefined || originalDocument == undefined) {\n      return;\n    }\n    const pos = this.documents.indexOf(originalDocument);\n    if (pos < 0) {\n      return;\n    }\n    newDocument.id = originalDocument.id;\n    this.documents[pos] = newDocument;\n    //this.documentListChanged.next(this.getDocuments())\n    this.storeDocuments();\n  }\n  deleteDocument(document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.documents.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    this.documents.splice(pos, 1);\n    //this.documentChangedEvent.emit(this.documents.slice());\n    //this.documentListChanged.next(this.getDocuments());\n    this.storeDocuments();\n  }\n  getMaxDocumentId() {\n    //return this.documents.sort(d=>d.id)[0];\n    let maxId = 0;\n    for (const document of this.documents) {\n      if (+document.id > maxId) {\n        maxId = +document.id;\n      }\n    }\n    return maxId;\n  }\n  storeDocuments() {\n    this.httpCient.put(this.fbURIdocuments, JSON.stringify(this.documents), {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      })\n    }).subscribe({\n      next: () => this.documentListChanged.next(this.documents.slice()),\n      error: evar => console.error('Error saving documents: ', evar)\n    });\n  }\n}\nDocumentService.ɵfac = function DocumentService_Factory(t) {\n  return new (t || DocumentService)(i0.ɵɵinject(i1.HttpClient));\n};\nDocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DocumentService,\n  factory: DocumentService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}