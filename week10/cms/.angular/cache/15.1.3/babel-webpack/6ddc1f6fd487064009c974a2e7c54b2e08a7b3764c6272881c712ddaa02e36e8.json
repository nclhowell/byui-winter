{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContactService {\n  constructor(httpCient) {\n    this.httpCient = httpCient;\n    this.fbURIcontacts = \"https://wdd430cms0-default-rtdb.firebaseio.com/contacts.json\";\n    this.contacts = [];\n    this.contactSelectedEvent = new EventEmitter();\n    // contactChangedEvent = new EventEmitter<Contact[]>();\n    this.contactListChanged = new Subject();\n    //this.contacts = MOCKCONTACTS;\n    this.contacts = this.getContacts();\n    this.maxContactId = this.getMaxContactId();\n  }\n  getContacts() {\n    this.httpCient.get(this.fbURIcontacts).subscribe(docs => {\n      // console.log(docs);\n      this.contacts = docs;\n      this.maxContactId = this.getMaxContactId();\n      // Alphabetical Sort\n      this.contacts.sort((a, b) => {\n        if (a.name < b.name) {\n          return -1;\n        }\n        if (a.name > b.name) {\n          return 1;\n        }\n        return 0;\n      });\n      this.contactListChanged.next(this.contacts.slice());\n    });\n    return this.contacts.slice();\n  }\n  getContact(id) {\n    for (const contact of this.contacts) {\n      if (contact.id == id) {\n        //console.log(\"found!\")\n        return contact;\n      }\n    }\n    return null;\n  }\n  addContact(newContact) {\n    if (newContact == undefined || newContact == null) {\n      return;\n    }\n    this.maxContactId++;\n    newContact.id = String(this.maxContactId);\n    this.contacts.push(newContact);\n    //this.contactListChanged.next(this.getContacts())\n    this.storeContacts();\n  }\n  updateContact(originalContact, newContact) {\n    if (originalContact == null || originalContact == undefined) {\n      return;\n    }\n    const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n    newContact.id = originalContact.id;\n    this.contacts[pos] = newContact;\n    //this.contactListChanged.next(this.getContacts())\n    this.storeContacts();\n  }\n  deleteContact(contact) {\n    if (!contact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    this.contacts.splice(pos, 1);\n    //this.contactChangedEvent.emit(this.contacts.slice());\n    //this.contactListChanged.next(this.getContacts());\n    this.storeContacts();\n  }\n  getMaxContactId() {\n    //return this.contacts.sort(d=>d.id)[0];\n    let maxId = 0;\n    for (const contact of this.contacts) {\n      if (+contact.id > maxId) {\n        maxId = +contact.id;\n      }\n    }\n    return maxId;\n  }\n  storeContacts() {\n    this.httpCient.put(this.fbURIcontacts, JSON.stringify(this.contacts), {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      })\n    }).subscribe({\n      next: () => this.contactListChanged.next(this.contacts.slice()),\n      error: evar => console.error('Error saving contacts: ', evar)\n    });\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient));\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}