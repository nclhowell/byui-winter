{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BikeService {\n  constructor(http) {\n    this.http = http;\n    // firebaseURIdocsArray: string = \"https://wdd430cms0-default-rtdb.firebaseio.com/bikes.json\";\n    this.mongoURIdocsArray = 'http://localhost:3000/bikes';\n    // jsondocs: Bike[] = [];\n    this.bikes = [];\n    this.message = 'generic message';\n    //  docsArray: Bike[] = MOCKCONTACTS;\n    this.bikeSelectedEvent = new EventEmitter();\n    this.bikeChangedEvent = new EventEmitter();\n    this.bikeListChanged = new Subject();\n  }\n  getBikes() {\n    this.http.get(this.mongoURIdocsArray).subscribe(docs => {\n      this.bikes = docs.bikes;\n      this.maxBikeId = this.getMaxBikeId();\n      this.bikes.sort((a, b) => {\n        if (a.manufacturer < b.manufacturer) {\n          return -1;\n        }\n        if (a.manufacturer > b.manufacturer) {\n          return 1;\n        }\n        return 0;\n      });\n      // console.log(this.bikes);\n      this.bikeListChanged.next(this.bikes.slice());\n    });\n    return this.bikes.slice();\n  }\n  getBike(id) {\n    console.log(id);\n    return this.http.get('http://localhost:3000/bikes/' + id);\n  }\n  // getBike(id: string): Bike {\n  //   for (const bike of this.bikes) {\n  //     if (bike.id == id) {\n  //       //console.log(\"found!\")\n  //       return bike;\n  //     }\n  //   }\n  //   return null;\n  // }\n  addBike(bike) {\n    if (!bike) {\n      return;\n    }\n    // make sure id of the new Bike is empty\n    bike.id = '';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // add to database\n    this.http.post('http://localhost:3000/bikes', bike, {\n      headers: headers\n    }).subscribe(responseData => {\n      // add new bike to docsArray\n      this.bikes.push(responseData.bike);\n      this.sortAndSend();\n    });\n  }\n  // addBike(newBike: Bike) {\n  //   if (newBike == undefined || newBike == null) {\n  //     return;\n  //   }\n  //   this.maxBikeId++;\n  //   newBike.id = String(this.maxBikeId);\n  //   this.docsArray.push(newBike)\n  //   this.storeBikes();\n  // }\n  // updateBike(originalBike: Bike, newBike: Bike) {\n  //   if (originalBike == null || originalBike == null || originalBike == undefined || originalBike == undefined) {\n  //     return;\n  //   }\n  //   const pos = this.docsArray.indexOf(originalBike);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   newBike.id = originalBike.id;\n  //   this.docsArray[pos] = newBike;\n  //   this.storeBikes();\n  // }\n  updateBike(originalBike, newBike) {\n    if (!originalBike || !newBike) {\n      return;\n    }\n    const pos = this.bikes.findIndex(d => d.id === originalBike.id);\n    if (pos < 0) {\n      return;\n    }\n    // set the id of the new Bike to the id of the old Bike\n    newBike.id = originalBike.id;\n    // newBike._id = originalBike._id;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // update database\n    this.http.put('http://localhost:3000/bikes/' + originalBike.id, newBike, {\n      headers: headers\n    }).subscribe(response => {\n      this.bikes[pos] = newBike;\n      this.sortAndSend();\n    });\n  }\n  // deleteBike(bike: Bike) {\n  //   if (!bike) {\n  //     return;\n  //   }\n  //   const pos = this.docsArray.indexOf(bike);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   this.docsArray.splice(pos, 1);\n  //   this.storeBikes();\n  // }\n  deleteBike(bike) {\n    if (!bike) {\n      return;\n    }\n    const pos = this.bikes.findIndex(d => d.id === bike.id);\n    if (pos < 0) {\n      return;\n    }\n    // delete from database\n    this.http.delete('http://localhost:3000/bikes/' + bike.id).subscribe(response => {\n      this.bikes.splice(pos, 1);\n      this.sortAndSend();\n    });\n  }\n  getMaxBikeId() {\n    let maxId = 0;\n    for (const bike of this.bikes) {\n      if (+bike.id > maxId) {\n        maxId = +bike.id;\n      }\n    }\n    return maxId;\n  }\n  storeBikes() {\n    this.http.put(this.mongoURIdocsArray, JSON.stringify(this.bikes), {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    }).subscribe({\n      next: () => this.bikeListChanged.next(this.bikes.slice()),\n      error: evar => console.error('Error saving docsArray: ', evar)\n    });\n  }\n  sortAndSend() {\n    this.bikes.sort((a, b) => {\n      if (a.manufacturer < b.manufacturer) {\n        return -1;\n      }\n      if (a.manufacturer > b.manufacturer) {\n        return 1;\n      }\n      return 0;\n    });\n    this.bikeListChanged.next(this.bikes.slice());\n  }\n}\nBikeService.ɵfac = function BikeService_Factory(t) {\n  return new (t || BikeService)(i0.ɵɵinject(i1.HttpClient));\n};\nBikeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BikeService,\n  factory: BikeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,YAAY,QAA4B,eAAe;AAChE,SAASC,OAAO,QAAQ,MAAM;;;AAS9B,OAAM,MAAOC,WAAW;EAatBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAZxB;IACA,sBAAiB,GAAW,6BAA6B;IACzD;IACA,UAAK,GAAW,EAAE;IAElB,YAAO,GAAW,iBAAiB;IACnC;IACA,sBAAiB,GAAG,IAAIJ,YAAY,EAAQ;IAC5C,qBAAgB,GAAG,IAAIA,YAAY,EAAU;IAC7C,oBAAe,GAAG,IAAIC,OAAO,EAAU;EAGA;EAEvCI,QAAQ;IACN,IAAI,CAACD,IAAI,CACNE,GAAG,CAAqC,IAAI,CAACC,iBAAiB,CAAC,CAC/DC,SAAS,CAAEC,IAAI,IAAI;MAClB,IAAI,CAACC,KAAK,GAAGD,IAAI,CAACC,KAAK;MACvB,IAAI,CAACC,SAAS,GAAG,IAAI,CAACC,YAAY,EAAE;MACpC,IAAI,CAACF,KAAK,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;QACvB,IAAID,CAAC,CAACE,YAAY,GAAGD,CAAC,CAACC,YAAY,EAAE;UACnC,OAAO,CAAC,CAAC;;QAEX,IAAIF,CAAC,CAACE,YAAY,GAAGD,CAAC,CAACC,YAAY,EAAE;UACnC,OAAO,CAAC;;QAEV,OAAO,CAAC;MACV,CAAC,CAAC;MACH;MACC,IAAI,CAACC,eAAe,CAACC,IAAI,CAAC,IAAI,CAACR,KAAK,CAACS,KAAK,EAAE,CAAC;IAC/C,CAAC,CAAC;IACJ,OAAO,IAAI,CAACT,KAAK,CAACS,KAAK,EAAE;EAC3B;EAEAC,OAAO,CAACC,EAAU;IAChBC,OAAO,CAACC,GAAG,CAACF,EAAE,CAAC;IACf,OAAO,IAAI,CAACjB,IAAI,CAACE,GAAG,CAAkC,8BAA8B,GAAGe,EAAE,CAAC;EAC5F;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEAG,OAAO,CAACC,IAAU;IAChB,IAAI,CAACA,IAAI,EAAE;MACT;;IAGF;IACAA,IAAI,CAACJ,EAAE,GAAG,EAAE;IAEZ,MAAMK,OAAO,GAAG,IAAI3B,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IAEvE;IACA,IAAI,CAACK,IAAI,CACNuB,IAAI,CACH,6BAA6B,EAC7BF,IAAI,EACJ;MAAEC,OAAO,EAAEA;IAAO,CAAE,CACrB,CACAlB,SAAS,CAAEoB,YAAY,IAAI;MAC1B;MACA,IAAI,CAAClB,KAAK,CAACmB,IAAI,CAACD,YAAY,CAACH,IAAI,CAAC;MAClC,IAAI,CAACK,WAAW,EAAE;IACpB,CAAC,CAAC;EACN;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEAC,UAAU,CAACC,YAAkB,EAAEC,OAAa;IAC1C,IAAI,CAACD,YAAY,IAAI,CAACC,OAAO,EAAE;MAC7B;;IAGF,MAAMC,GAAG,GAAG,IAAI,CAACxB,KAAK,CAACyB,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACf,EAAE,KAAKW,YAAY,CAACX,EAAE,CAAC;IAEjE,IAAIa,GAAG,GAAG,CAAC,EAAE;MACX;;IAGF;IACAD,OAAO,CAACZ,EAAE,GAAGW,YAAY,CAACX,EAAE;IAC5B;IAEA,MAAMK,OAAO,GAAG,IAAI3B,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IAEvE;IACA,IAAI,CAACK,IAAI,CACNiC,GAAG,CAAC,8BAA8B,GAAGL,YAAY,CAACX,EAAE,EAAEY,OAAO,EAAE;MAC9DP,OAAO,EAAEA;KACV,CAAC,CACDlB,SAAS,CAAE8B,QAAkB,IAAI;MAChC,IAAI,CAAC5B,KAAK,CAACwB,GAAG,CAAC,GAAGD,OAAO;MACzB,IAAI,CAACH,WAAW,EAAE;IACpB,CAAC,CAAC;EACN;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAS,UAAU,CAACd,IAAU;IACnB,IAAI,CAACA,IAAI,EAAE;MACT;;IAGF,MAAMS,GAAG,GAAG,IAAI,CAACxB,KAAK,CAACyB,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACf,EAAE,KAAKI,IAAI,CAACJ,EAAE,CAAC;IAEzD,IAAIa,GAAG,GAAG,CAAC,EAAE;MACX;;IAGF;IACA,IAAI,CAAC9B,IAAI,CACNoC,MAAM,CAAC,8BAA8B,GAAGf,IAAI,CAACJ,EAAE,CAAC,CAChDb,SAAS,CAAE8B,QAAkB,IAAI;MAChC,IAAI,CAAC5B,KAAK,CAAC+B,MAAM,CAACP,GAAG,EAAE,CAAC,CAAC;MACzB,IAAI,CAACJ,WAAW,EAAE;IACpB,CAAC,CAAC;EACN;EAEAlB,YAAY;IACV,IAAI8B,KAAK,GAAG,CAAC;IACb,KAAK,MAAMjB,IAAI,IAAI,IAAI,CAACf,KAAK,EAAE;MAC7B,IAAI,CAACe,IAAI,CAACJ,EAAE,GAAGqB,KAAK,EAAE;QACpBA,KAAK,GAAG,CAACjB,IAAI,CAACJ,EAAE;;;IAGpB,OAAOqB,KAAK;EACd;EAEAC,UAAU;IACR,IAAI,CAACvC,IAAI,CACNiC,GAAG,CAAC,IAAI,CAAC9B,iBAAiB,EAAEqC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACnC,KAAK,CAAC,EAAE;MACvDgB,OAAO,EAAE,IAAI3B,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE,CAAC,CACDS,SAAS,CAAC;MACTU,IAAI,EAAE,MAAM,IAAI,CAACD,eAAe,CAACC,IAAI,CAAC,IAAI,CAACR,KAAK,CAACS,KAAK,EAAE,CAAC;MACzD2B,KAAK,EAAGC,IAAI,IAAKzB,OAAO,CAACwB,KAAK,CAAC,0BAA0B,EAAEC,IAAI;KAChE,CAAC;EACN;EAEAjB,WAAW;IACT,IAAI,CAACpB,KAAK,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;MACvB,IAAID,CAAC,CAACE,YAAY,GAAGD,CAAC,CAACC,YAAY,EAAE;QACnC,OAAO,CAAC,CAAC;;MAEX,IAAIF,CAAC,CAACE,YAAY,GAAGD,CAAC,CAACC,YAAY,EAAE;QACnC,OAAO,CAAC;;MAEV,OAAO,CAAC;IACV,CAAC,CAAC;IACF,IAAI,CAACC,eAAe,CAACC,IAAI,CAAC,IAAI,CAACR,KAAK,CAACS,KAAK,EAAE,CAAC;EAC/C;;AAlMWjB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA8C,SAAX9C,WAAW;EAAA+C,YAFV;AAAM","names":["HttpHeaders","EventEmitter","Subject","BikeService","constructor","http","getBikes","get","mongoURIdocsArray","subscribe","docs","bikes","maxBikeId","getMaxBikeId","sort","a","b","manufacturer","bikeListChanged","next","slice","getBike","id","console","log","addBike","bike","headers","post","responseData","push","sortAndSend","updateBike","originalBike","newBike","pos","findIndex","d","put","response","deleteBike","delete","splice","maxId","storeBikes","JSON","stringify","error","evar","factory","providedIn"],"sourceRoot":"","sources":["C:\\data\\A-byu\\Full Stack Dev WDD 430\\code\\wdd430\\byui-winter\\FinalProj\\cms\\src\\app\\bikes\\bike.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { EventEmitter, Injectable, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Bike } from './bike.model'\n// import { MOCKCONTACTS } from './MOCKCONTACTS';\nimport { json } from 'body-parser';\nimport { response } from 'express';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BikeService {\n  // firebaseURIdocsArray: string = \"https://wdd430cms0-default-rtdb.firebaseio.com/bikes.json\";\n  mongoURIdocsArray: string = 'http://localhost:3000/bikes';\n  // jsondocs: Bike[] = [];\n  bikes: Bike[] = [];\n  bike: Bike;\n  message: string = 'generic message';\n  //  docsArray: Bike[] = MOCKCONTACTS;\n  bikeSelectedEvent = new EventEmitter<Bike>();\n  bikeChangedEvent = new EventEmitter<Bike[]>();\n  bikeListChanged = new Subject<Bike[]>();\n  maxBikeId: number;\n\n  constructor(private http: HttpClient) {}\n\n  getBikes() {\n    this.http\n      .get<{ message: string; bikes: Bike[] }>(this.mongoURIdocsArray)\n      .subscribe((docs) => {\n        this.bikes = docs.bikes;\n        this.maxBikeId = this.getMaxBikeId();\n        this.bikes.sort((a, b) => {\n          if (a.manufacturer < b.manufacturer) {\n            return -1;\n          }\n          if (a.manufacturer > b.manufacturer) {\n            return 1;\n          }\n          return 0;\n        });\n       // console.log(this.bikes);\n        this.bikeListChanged.next(this.bikes.slice());\n      });\n    return this.bikes.slice();\n  }\n\n  getBike(id: string) {\n    console.log(id);\n    return this.http.get<{ message: string; bike: Bike }>('http://localhost:3000/bikes/' + id);\n  }\n  // getBike(id: string): Bike {\n\n  //   for (const bike of this.bikes) {\n  //     if (bike.id == id) {\n\n  //       //console.log(\"found!\")\n  //       return bike;\n  //     }\n  //   }\n  //   return null;\n  // }\n\n  addBike(bike: Bike) {\n    if (!bike) {\n      return;\n    }\n\n    // make sure id of the new Bike is empty\n    bike.id = '';\n\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    // add to database\n    this.http\n      .post<{ message: string; bike: Bike }>(\n        'http://localhost:3000/bikes',\n        bike,\n        { headers: headers }\n      )\n      .subscribe((responseData) => {\n        // add new bike to docsArray\n        this.bikes.push(responseData.bike);\n        this.sortAndSend();\n      });\n  }\n\n  // addBike(newBike: Bike) {\n  //   if (newBike == undefined || newBike == null) {\n  //     return;\n  //   }\n\n  //   this.maxBikeId++;\n  //   newBike.id = String(this.maxBikeId);\n  //   this.docsArray.push(newBike)\n  //   this.storeBikes();\n  // }\n\n  // updateBike(originalBike: Bike, newBike: Bike) {\n  //   if (originalBike == null || originalBike == null || originalBike == undefined || originalBike == undefined) {\n  //     return;\n  //   }\n\n  //   const pos = this.docsArray.indexOf(originalBike);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n\n  //   newBike.id = originalBike.id;\n  //   this.docsArray[pos] = newBike;\n  //   this.storeBikes();\n  // }\n\n  updateBike(originalBike: Bike, newBike: Bike) {\n    if (!originalBike || !newBike) {\n      return;\n    }\n\n    const pos = this.bikes.findIndex((d) => d.id === originalBike.id);\n\n    if (pos < 0) {\n      return;\n    }\n\n    // set the id of the new Bike to the id of the old Bike\n    newBike.id = originalBike.id;\n    // newBike._id = originalBike._id;\n\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    // update database\n    this.http\n      .put('http://localhost:3000/bikes/' + originalBike.id, newBike, {\n        headers: headers,\n      })\n      .subscribe((response: Response) => {\n        this.bikes[pos] = newBike;\n        this.sortAndSend();\n      });\n  }\n\n  // deleteBike(bike: Bike) {\n  //   if (!bike) {\n  //     return;\n  //   }\n  //   const pos = this.docsArray.indexOf(bike);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   this.docsArray.splice(pos, 1);\n  //   this.storeBikes();\n  // }\n\n  deleteBike(bike: Bike) {\n    if (!bike) {\n      return;\n    }\n\n    const pos = this.bikes.findIndex((d) => d.id === bike.id);\n\n    if (pos < 0) {\n      return;\n    }\n\n    // delete from database\n    this.http\n      .delete('http://localhost:3000/bikes/' + bike.id)\n      .subscribe((response: Response) => {\n        this.bikes.splice(pos, 1);\n        this.sortAndSend();\n      });\n  }\n\n  getMaxBikeId(): number {\n    let maxId = 0;\n    for (const bike of this.bikes) {\n      if (+bike.id > maxId) {\n        maxId = +bike.id;\n      }\n    }\n    return maxId;\n  }\n\n  storeBikes() {\n    this.http\n      .put(this.mongoURIdocsArray, JSON.stringify(this.bikes), {\n        headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n      })\n      .subscribe({\n        next: () => this.bikeListChanged.next(this.bikes.slice()),\n        error: (evar) => console.error('Error saving docsArray: ', evar),\n      });\n  }\n\n  sortAndSend() {\n    this.bikes.sort((a, b) => {\n      if (a.manufacturer < b.manufacturer) {\n        return -1;\n      }\n      if (a.manufacturer > b.manufacturer) {\n        return 1;\n      }\n      return 0;\n    });\n    this.bikeListChanged.next(this.bikes.slice());\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}